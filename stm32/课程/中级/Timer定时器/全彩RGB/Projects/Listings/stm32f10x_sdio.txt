; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\output\stm32f10x_sdio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\output\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Drivers\CMSIS -I..\Drivers\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\Drivers\BSP\SYS -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\USART -I..\Middlewares\FreeRTOS\include -I..\Middlewares\FreeRTOS\portable\RVDS\ARM_CM3 -I..\Drivers\BSP\LED -I..\Drivers\BSP\OLED -I..\Drivers\BSP\TIM -I..\Drivers\BSP\PWM -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\SYS -ID:\AppData\keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=540 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\output\stm32f10x_sdio.crf ..\Drivers\STM32F10x_StdPeriph_Driver\src\stm32f10x_sdio.c]
                          THUMB

                          AREA ||i.SDIO_CEATAITCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CEATAITCmd PROC
;;;611      */
;;;612    void SDIO_CEATAITCmd(FunctionalState NewState)
000000  2101              MOVS     r1,#1
;;;613    { 
;;;614      /* Check the parameters */
;;;615      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;616      
;;;617      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
000002  4381              BICS     r1,r1,r0
000004  4a01              LDR      r2,|L1.12|
000006  6011              STR      r1,[r2,#0]
;;;618    }
000008  4770              BX       lr
;;;619    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x423001b4

                          AREA ||i.SDIO_ClearFlag||, CODE, READONLY, ALIGN=2

                  SDIO_ClearFlag PROC
;;;701      */
;;;702    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
000000  4901              LDR      r1,|L2.8|
;;;703    { 
;;;704      /* Check the parameters */
;;;705      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;706       
;;;707      SDIO->ICR = SDIO_FLAG;
000002  6388              STR      r0,[r1,#0x38]
;;;708    }
000004  4770              BX       lr
;;;709    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  SDIO_ClearITPendingBit PROC
;;;776      */
;;;777    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
000000  4901              LDR      r1,|L3.8|
;;;778    { 
;;;779      /* Check the parameters */
;;;780      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;781       
;;;782      SDIO->ICR = SDIO_IT;
000002  6388              STR      r0,[r1,#0x38]
;;;783    }
000004  4770              BX       lr
;;;784    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClockCmd||, CODE, READONLY, ALIGN=2

                  SDIO_ClockCmd PROC
;;;233      */
;;;234    void SDIO_ClockCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;235    {
;;;236      /* Check the parameters */
;;;237      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;238      
;;;239      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;240    }
000004  4770              BX       lr
;;;241    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x423000a0

                          AREA ||i.SDIO_CmdStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_CmdStructInit PROC
;;;379      */
;;;380    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;381    {
;;;382      /* SDIO_CmdInitStruct members default value */
;;;383      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;384      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;385      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
000006  6081              STR      r1,[r0,#8]
;;;386      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
000008  60c1              STR      r1,[r0,#0xc]
;;;387      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;388    }
00000c  4770              BX       lr
;;;389    
                          ENDP


                          AREA ||i.SDIO_CommandCompletionCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CommandCompletionCmd PROC
;;;598      */
;;;599    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;600    { 
;;;601      /* Check the parameters */
;;;602      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;603      
;;;604      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;605    }
000004  4770              BX       lr
;;;606    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x423001b0

                          AREA ||i.SDIO_DMACmd||, CODE, READONLY, ALIGN=2

                  SDIO_DMACmd PROC
;;;328      */
;;;329    void SDIO_DMACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;330    {
;;;331      /* Check the parameters */
;;;332      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;333      
;;;334      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;335    }
000004  4770              BX       lr
;;;336    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x4230058c

                          AREA ||i.SDIO_DataConfig||, CODE, READONLY, ALIGN=2

                  SDIO_DataConfig PROC
;;;428      */
;;;429    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  2100              MOVS     r1,#0
;;;430    {
;;;431      uint32_t tmpreg = 0;
;;;432      
;;;433      /* Check the parameters */
;;;434      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;435      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;436      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;437      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;438      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;439    
;;;440    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;441      /* Set the SDIO Data TimeOut value */
;;;442      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
000002  4b0a              LDR      r3,|L8.44|
000004  6802              LDR      r2,[r0,#0]
000006  625a              STR      r2,[r3,#0x24]
;;;443    
;;;444    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;445      /* Set the SDIO DataLength value */
;;;446      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
000008  6842              LDR      r2,[r0,#4]
00000a  629a              STR      r2,[r3,#0x28]
;;;447    
;;;448    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;449      /* Get the SDIO DCTRL value */
;;;450      tmpreg = SDIO->DCTRL;
00000c  461a              MOV      r2,r3
00000e  6ad1              LDR      r1,[r2,#0x2c]
;;;451      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;452      tmpreg &= DCTRL_CLEAR_MASK;
000010  f02101f7          BIC      r1,r1,#0xf7
;;;453      /* Set DEN bit according to SDIO_DPSM value */
;;;454      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;455      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;456      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;457      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
000014  e9d02302          LDRD     r2,r3,[r0,#8]
000018  431a              ORRS     r2,r2,r3
00001a  6903              LDR      r3,[r0,#0x10]
00001c  431a              ORRS     r2,r2,r3
00001e  6943              LDR      r3,[r0,#0x14]
000020  431a              ORRS     r2,r2,r3
000022  4311              ORRS     r1,r1,r2
;;;458               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;459    
;;;460      /* Write to SDIO DCTRL */
;;;461      SDIO->DCTRL = tmpreg;
000024  4a01              LDR      r2,|L8.44|
000026  62d1              STR      r1,[r2,#0x2c]
;;;462    }
000028  4770              BX       lr
;;;463    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0x40018000

                          AREA ||i.SDIO_DataStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_DataStructInit PROC
;;;469      */
;;;470    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;471    {
;;;472      /* SDIO_DataInitStruct members default value */
;;;473      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
000004  6001              STR      r1,[r0,#0]
;;;474      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000006  2100              MOVS     r1,#0
000008  6041              STR      r1,[r0,#4]
;;;475      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
00000a  6081              STR      r1,[r0,#8]
;;;476      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00000c  60c1              STR      r1,[r0,#0xc]
;;;477      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00000e  6101              STR      r1,[r0,#0x10]
;;;478      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
000010  6141              STR      r1,[r0,#0x14]
;;;479    }
000012  4770              BX       lr
;;;480    
                          ENDP


                          AREA ||i.SDIO_DeInit||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;159      */
;;;160    void SDIO_DeInit(void)
000000  2000              MOVS     r0,#0
;;;161    {
;;;162      SDIO->POWER = 0x00000000;
000002  4906              LDR      r1,|L10.28|
000004  6008              STR      r0,[r1,#0]
;;;163      SDIO->CLKCR = 0x00000000;
000006  6048              STR      r0,[r1,#4]
;;;164      SDIO->ARG = 0x00000000;
000008  6088              STR      r0,[r1,#8]
;;;165      SDIO->CMD = 0x00000000;
00000a  60c8              STR      r0,[r1,#0xc]
;;;166      SDIO->DTIMER = 0x00000000;
00000c  6248              STR      r0,[r1,#0x24]
;;;167      SDIO->DLEN = 0x00000000;
00000e  6288              STR      r0,[r1,#0x28]
;;;168      SDIO->DCTRL = 0x00000000;
000010  62c8              STR      r0,[r1,#0x2c]
;;;169      SDIO->ICR = 0x00C007FF;
000012  4803              LDR      r0,|L10.32|
000014  6388              STR      r0,[r1,#0x38]
;;;170      SDIO->MASK = 0x00000000;
000016  2000              MOVS     r0,#0
000018  63c8              STR      r0,[r1,#0x3c]
;;;171    }
00001a  4770              BX       lr
;;;172    
                          ENDP

                  |L10.28|
                          DCD      0x40018000
                  |L10.32|
                          DCD      0x00c007ff

                          AREA ||i.SDIO_GetCommandResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetCommandResponse PROC
;;;394      */
;;;395    uint8_t SDIO_GetCommandResponse(void)
000000  4801              LDR      r0,|L11.8|
;;;396    {
;;;397      return (uint8_t)(SDIO->RESPCMD);
000002  6900              LDR      r0,[r0,#0x10]
000004  b2c0              UXTB     r0,r0
;;;398    }
000006  4770              BX       lr
;;;399    
                          ENDP

                  |L11.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetDataCounter||, CODE, READONLY, ALIGN=2

                  SDIO_GetDataCounter PROC
;;;485      */
;;;486    uint32_t SDIO_GetDataCounter(void)
000000  4801              LDR      r0,|L12.8|
;;;487    { 
;;;488      return SDIO->DCOUNT;
000002  6b00              LDR      r0,[r0,#0x30]
;;;489    }
000004  4770              BX       lr
;;;490    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFIFOCount||, CODE, READONLY, ALIGN=2

                  SDIO_GetFIFOCount PROC
;;;515      */
;;;516    uint32_t SDIO_GetFIFOCount(void)
000000  4801              LDR      r0,|L13.8|
;;;517    { 
;;;518      return SDIO->FIFOCNT;
000002  6c80              LDR      r0,[r0,#0x48]
;;;519    }
000004  4770              BX       lr
;;;520    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetFlagStatus PROC
;;;663      */
;;;664    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
000000  4601              MOV      r1,r0
;;;665    { 
;;;666      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;667      
;;;668      /* Check the parameters */
;;;669      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;670      
;;;671      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L14.20|
000006  6b52              LDR      r2,[r2,#0x34]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L14.16|
;;;672      {
;;;673        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L14.18|
                  |L14.16|
;;;674      }
;;;675      else
;;;676      {
;;;677        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L14.18|
;;;678      }
;;;679      return bitstatus;
;;;680    }
000012  4770              BX       lr
;;;681    
                          ENDP

                  |L14.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetITStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetITStatus PROC
;;;740      */
;;;741    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
000000  4601              MOV      r1,r0
;;;742    { 
;;;743      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;744      
;;;745      /* Check the parameters */
;;;746      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;747      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
000004  4a03              LDR      r2,|L15.20|
000006  6b52              LDR      r2,[r2,#0x34]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L15.16|
;;;748      {
;;;749        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L15.18|
                  |L15.16|
;;;750      }
;;;751      else
;;;752      {
;;;753        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;754      }
;;;755      return bitstatus;
;;;756    }
000012  4770              BX       lr
;;;757    
                          ENDP

                  |L15.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_GetPowerState PROC
;;;266      */
;;;267    uint32_t SDIO_GetPowerState(void)
000000  4802              LDR      r0,|L16.12|
;;;268    {
;;;269      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000002  6800              LDR      r0,[r0,#0]
000004  f0000003          AND      r0,r0,#3
;;;270    }
000008  4770              BX       lr
;;;271    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetResponse PROC
;;;409      */
;;;410    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
000000  b508              PUSH     {r3,lr}
;;;411    {
000002  4601              MOV      r1,r0
;;;412      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;413    
;;;414      /* Check the parameters */
;;;415      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;416    
;;;417      tmp = SDIO_RESP_ADDR + SDIO_RESP;
000008  4802              LDR      r0,|L17.20|
00000a  4408              ADD      r0,r0,r1
00000c  9000              STR      r0,[sp,#0]
;;;418      
;;;419      return (*(__IO uint32_t *) tmp); 
00000e  9800              LDR      r0,[sp,#0]
000010  6800              LDR      r0,[r0,#0]
;;;420    }
000012  bd08              POP      {r3,pc}
;;;421    
                          ENDP

                  |L17.20|
                          DCD      0x40018014

                          AREA ||i.SDIO_ITConfig||, CODE, READONLY, ALIGN=2

                  SDIO_ITConfig PROC
;;;304      */
;;;305    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L18.14|
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_SDIO_IT(SDIO_IT));
;;;309      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310      
;;;311      if (NewState != DISABLE)
;;;312      {
;;;313        /* Enable the SDIO interrupts */
;;;314        SDIO->MASK |= SDIO_IT;
000002  4a06              LDR      r2,|L18.28|
000004  6bd2              LDR      r2,[r2,#0x3c]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L18.28|
00000a  63da              STR      r2,[r3,#0x3c]
00000c  e004              B        |L18.24|
                  |L18.14|
;;;315      }
;;;316      else
;;;317      {
;;;318        /* Disable the SDIO interrupts */
;;;319        SDIO->MASK &= ~SDIO_IT;
00000e  4a03              LDR      r2,|L18.28|
000010  6bd2              LDR      r2,[r2,#0x3c]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L18.28|
000016  63da              STR      r2,[r3,#0x3c]
                  |L18.24|
;;;320      } 
;;;321    }
000018  4770              BX       lr
;;;322    
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      0x40018000

                          AREA ||i.SDIO_Init||, CODE, READONLY, ALIGN=2

                  SDIO_Init PROC
;;;179      */
;;;180    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;181    {
;;;182      uint32_t tmpreg = 0;
;;;183        
;;;184      /* Check the parameters */
;;;185      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;186      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;187      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;188      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;189      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;190       
;;;191    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;192      /* Get the SDIO CLKCR value */
;;;193      tmpreg = SDIO->CLKCR;
000002  4a0a              LDR      r2,|L19.44|
000004  6851              LDR      r1,[r2,#4]
;;;194      
;;;195      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;196      tmpreg &= CLKCR_CLEAR_MASK;
000006  f64762ff          MOV      r2,#0x7eff
00000a  4391              BICS     r1,r1,r2
;;;197      
;;;198      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;199      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;200      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;201      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;202      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;203      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;204      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
00000c  7d02              LDRB     r2,[r0,#0x14]
00000e  6883              LDR      r3,[r0,#8]
000010  431a              ORRS     r2,r2,r3
000012  6843              LDR      r3,[r0,#4]
000014  431a              ORRS     r2,r2,r3
000016  68c3              LDR      r3,[r0,#0xc]
000018  431a              ORRS     r2,r2,r3
00001a  6803              LDR      r3,[r0,#0]
00001c  431a              ORRS     r2,r2,r3
00001e  6903              LDR      r3,[r0,#0x10]
000020  431a              ORRS     r2,r2,r3
000022  4311              ORRS     r1,r1,r2
;;;205                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;206                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;207      
;;;208      /* Write to SDIO CLKCR */
;;;209      SDIO->CLKCR = tmpreg;
000024  4a01              LDR      r2,|L19.44|
000026  6051              STR      r1,[r2,#4]
;;;210    }
000028  4770              BX       lr
;;;211    
                          ENDP

00002a  0000              DCW      0x0000
                  |L19.44|
                          DCD      0x40018000

                          AREA ||i.SDIO_ReadData||, CODE, READONLY, ALIGN=2

                  SDIO_ReadData PROC
;;;495      */
;;;496    uint32_t SDIO_ReadData(void)
000000  4801              LDR      r0,|L20.8|
;;;497    { 
;;;498      return SDIO->FIFO;
000002  6800              LDR      r0,[r0,#0]
;;;499    }
000004  4770              BX       lr
;;;500    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x40018080

                          AREA ||i.SDIO_SendCEATACmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendCEATACmd PROC
;;;624      */
;;;625    void SDIO_SendCEATACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L21.8|
;;;626    { 
;;;627      /* Check the parameters */
;;;628      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;629      
;;;630      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;631    }
000004  4770              BX       lr
;;;632    
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x423001b8

                          AREA ||i.SDIO_SendCommand||, CODE, READONLY, ALIGN=2

                  SDIO_SendCommand PROC
;;;343      */
;;;344    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;345    {
;;;346      uint32_t tmpreg = 0;
;;;347      
;;;348      /* Check the parameters */
;;;349      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;350      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;351      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;352      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;353      
;;;354    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;355      /* Set the SDIO Argument value */
;;;356      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
000002  4b09              LDR      r3,|L22.40|
000004  6802              LDR      r2,[r0,#0]
000006  609a              STR      r2,[r3,#8]
;;;357      
;;;358    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;359      /* Get the SDIO CMD value */
;;;360      tmpreg = SDIO->CMD;
000008  461a              MOV      r2,r3
00000a  68d1              LDR      r1,[r2,#0xc]
;;;361      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;362      tmpreg &= CMD_CLEAR_MASK;
00000c  f36f010a          BFC      r1,#0,#11
;;;363      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;364      /* Set WAITRESP bits according to SDIO_Response value */
;;;365      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;366      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;367      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
000010  e9d02301          LDRD     r2,r3,[r0,#4]
000014  431a              ORRS     r2,r2,r3
000016  68c3              LDR      r3,[r0,#0xc]
000018  431a              ORRS     r2,r2,r3
00001a  6903              LDR      r3,[r0,#0x10]
00001c  431a              ORRS     r2,r2,r3
00001e  4311              ORRS     r1,r1,r2
;;;368               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;369      
;;;370      /* Write to SDIO CMD */
;;;371      SDIO->CMD = tmpreg;
000020  4a01              LDR      r2,|L22.40|
000022  60d1              STR      r1,[r2,#0xc]
;;;372    }
000024  4770              BX       lr
;;;373    
                          ENDP

000026  0000              DCW      0x0000
                  |L22.40|
                          DCD      0x40018000

                          AREA ||i.SDIO_SendSDIOSuspendCmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendSDIOSuspendCmd PROC
;;;584      */
;;;585    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L23.8|
;;;586    { 
;;;587      /* Check the parameters */
;;;588      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;589      
;;;590      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;591    }
000004  4770              BX       lr
;;;592    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x423001ac

                          AREA ||i.SDIO_SetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_SetPowerState PROC
;;;249      */
;;;250    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
000000  4901              LDR      r1,|L24.8|
;;;251    {
;;;252      /* Check the parameters */
;;;253      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;254      
;;;255      SDIO->POWER = SDIO_PowerState;
000002  6008              STR      r0,[r1,#0]
;;;256    }
000004  4770              BX       lr
;;;257    
                          ENDP

000006  0000              DCW      0x0000
                  |L24.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_SetSDIOOperation||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOOperation PROC
;;;570      */
;;;571    void SDIO_SetSDIOOperation(FunctionalState NewState)
000000  4901              LDR      r1,|L25.8|
;;;572    { 
;;;573      /* Check the parameters */
;;;574      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;575      
;;;576      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;577    }
000004  4770              BX       lr
;;;578    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x423005ac

                          AREA ||i.SDIO_SetSDIOReadWaitMode||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOReadWaitMode PROC
;;;556      */
;;;557    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000000  4901              LDR      r1,|L26.8|
;;;558    {
;;;559      /* Check the parameters */
;;;560      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;561      
;;;562      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000002  6008              STR      r0,[r1,#0]
;;;563    }
000004  4770              BX       lr
;;;564    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x423005a8

                          AREA ||i.SDIO_StartSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StartSDIOReadWait PROC
;;;526      */
;;;527    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L27.8|
;;;528    { 
;;;529      /* Check the parameters */
;;;530      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;531      
;;;532      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;533    }
000004  4770              BX       lr
;;;534    
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      0x423005a0

                          AREA ||i.SDIO_StopSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StopSDIOReadWait PROC
;;;540      */
;;;541    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;542    { 
;;;543      /* Check the parameters */
;;;544      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;545      
;;;546      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;547    }
000004  4770              BX       lr
;;;548    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x423005a4

                          AREA ||i.SDIO_StructInit||, CODE, READONLY, ALIGN=1

                  SDIO_StructInit PROC
;;;217      */
;;;218    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;219    {
;;;220      /* SDIO_InitStruct members default value */
;;;221      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000002  7501              STRB     r1,[r0,#0x14]
;;;222      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000004  6001              STR      r1,[r0,#0]
;;;223      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000006  6041              STR      r1,[r0,#4]
;;;224      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000008  6081              STR      r1,[r0,#8]
;;;225      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
00000a  60c1              STR      r1,[r0,#0xc]
;;;226      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00000c  6101              STR      r1,[r0,#0x10]
;;;227    }
00000e  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.SDIO_WriteData||, CODE, READONLY, ALIGN=2

                  SDIO_WriteData PROC
;;;505      */
;;;506    void SDIO_WriteData(uint32_t Data)
000000  4901              LDR      r1,|L30.8|
;;;507    { 
;;;508      SDIO->FIFO = Data;
000002  6008              STR      r0,[r1,#0]
;;;509    }
000004  4770              BX       lr
;;;510    
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      0x40018080
