; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\output\bsp_tim.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\output\bsp_tim.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Drivers\CMSIS -I..\Drivers\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\Drivers\BSP\SYS -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\USART -I..\Middlewares\FreeRTOS\include -I..\Middlewares\FreeRTOS\portable\RVDS\ARM_CM3 -I..\Drivers\BSP\LED -I..\Drivers\BSP\OLED -I..\Drivers\BSP\TIM -I..\Drivers\BSP\PWM -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\SYS -ID:\AppData\keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=540 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\output\bsp_tim.crf ..\Drivers\BSP\TIM\bsp_tim.c]
                          THUMB

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;8       */
;;;9      static void NVIC_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;10     {
;;;11     	NVIC_InitTypeDef NVIC_InitStructure;
;;;12     	/*配置优先级分组，只需在整个工程中配置一次*/
;;;13     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;14     	NVIC_InitStructure.NVIC_IRQChannel = Timx_IRQn;
00000a  2037              MOVS     r0,#0x37
00000c  f88d0000          STRB     r0,[sp,#0]
;;;15     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000010  2001              MOVS     r0,#1
000012  f88d0003          STRB     r0,[sp,#3]
;;;16     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1; /*抢占优先级*/
000016  f88d0001          STRB     r0,[sp,#1]
;;;17     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;		  /*子优先级*/
00001a  f88d0002          STRB     r0,[sp,#2]
;;;18     	NVIC_Init(&NVIC_InitStructure);
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       NVIC_Init
;;;19     }
000024  bd08              POP      {r3,pc}
;;;20     
                          ENDP


                          AREA ||i.TIM7_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM7_IRQHandler PROC
;;;55     
;;;56     void TIM7_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	while (TIM_GetITStatus(Timx, TIM_IT_Update))
000002  e00e              B        |L2.34|
                  |L2.4|
;;;59     	{
;;;60     		value++;
000004  480a              LDR      r0,|L2.48|
000006  8800              LDRH     r0,[r0,#0]  ; value
000008  1c40              ADDS     r0,r0,#1
00000a  4909              LDR      r1,|L2.48|
00000c  8008              STRH     r0,[r1,#0]
;;;61     		TIM_ClearFlag(Timx, TIM_FLAG_Update);
00000e  2101              MOVS     r1,#1
000010  4808              LDR      r0,|L2.52|
000012  f7fffffe          BL       TIM_ClearFlag
;;;62     		LEDG_TOGGLE;
000016  4808              LDR      r0,|L2.56|
000018  6800              LDR      r0,[r0,#0]
00001a  f0800001          EOR      r0,r0,#1
00001e  4906              LDR      r1,|L2.56|
000020  6008              STR      r0,[r1,#0]
                  |L2.34|
000022  2101              MOVS     r1,#1                 ;58
000024  4803              LDR      r0,|L2.52|
000026  f7fffffe          BL       TIM_GetITStatus
00002a  2800              CMP      r0,#0                 ;58
00002c  d1ea              BNE      |L2.4|
;;;63     	}
;;;64     }
00002e  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  |L2.48|
                          DCD      value
                  |L2.52|
                          DCD      0x40012c00
                  |L2.56|
                          DCD      0x40010c0c

                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=2

                  Timer_Init PROC
;;;24      */
;;;25     void Timer_Init(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;26     {
;;;27     	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
;;;28     	/*开时钟*/
;;;29     	Timx_APBxClock_FUN(Timx_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  2020              MOVS     r0,#0x20
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;30     	/*选择内部时钟*/
;;;31     	TIM_InternalClockConfig(Timx);/*若不选择时钟则默认内部时钟*/
00000a  4811              LDR      r0,|L3.80|
00000c  f7fffffe          BL       TIM_InternalClockConfig
;;;32     	/*选择其他时钟*/
;;;33     
;;;34     	/*基本定时器没有的功能 */
;;;35     	/*定时器时钟CK_INT频率与数字滤波器采样频率之间的分频比*/
;;;36     	//    TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
;;;37     	/*设定重复计数器值，仅高级定时器有此功能*/
;;;38     	// TIM_TimeBaseInitStructure.TIM_RepetitionCounter;
;;;39     	/*重装载寄存器计数方式为向上计数*/
;;;40     	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
000010  2000              MOVS     r0,#0
000012  f8ad0002          STRH     r0,[sp,#2]
;;;41     	/*重装载寄存器值*/
;;;42     	TIM_TimeBaseInitStructure.TIM_Period = 7200 - 1;
000016  f641401f          MOV      r0,#0x1c1f
00001a  f8ad0004          STRH     r0,[sp,#4]
;;;43     	/*预分频值*/
;;;44     	TIM_TimeBaseInitStructure.TIM_Prescaler = 10000 - 1;
00001e  f242700f          MOV      r0,#0x270f
000022  f8ad0000          STRH     r0,[sp,#0]
;;;45     	TIM_TimeBaseInit(Timx, &TIM_TimeBaseInitStructure);
000026  4669              MOV      r1,sp
000028  4809              LDR      r0,|L3.80|
00002a  f7fffffe          BL       TIM_TimeBaseInit
;;;46     	/*由于TIM_TimeBaseInit在最后回产生一个更新事件，而更新时间和更新中断同时发生，故在使能TIM会立即进入一次中断*/
;;;47     	/*若不想程序开始时进入中断，只需在TIM_TimeBaseInit与TIM_ITConfig之间清楚更新事件标志位即可*/
;;;48     	TIM_ClearFlag(Timx, TIM_FLAG_Update); /*这行代码可保证value从0开始计*/
00002e  2101              MOVS     r1,#1
000030  4807              LDR      r0,|L3.80|
000032  f7fffffe          BL       TIM_ClearFlag
;;;49     	/*TIM中断配置与开中断*/
;;;50     	NVIC_Configuration();
000036  f7fffffe          BL       NVIC_Configuration
;;;51     	TIM_ITConfig(Timx, TIM_IT_Update, ENABLE);
00003a  2201              MOVS     r2,#1
00003c  4611              MOV      r1,r2
00003e  4804              LDR      r0,|L3.80|
000040  f7fffffe          BL       TIM_ITConfig
;;;52     	/*使能TIM*/
;;;53     	TIM_Cmd(Timx, ENABLE);
000044  2101              MOVS     r1,#1
000046  4802              LDR      r0,|L3.80|
000048  f7fffffe          BL       TIM_Cmd
;;;54     }
00004c  bd0e              POP      {r1-r3,pc}
;;;55     
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      0x40012c00
