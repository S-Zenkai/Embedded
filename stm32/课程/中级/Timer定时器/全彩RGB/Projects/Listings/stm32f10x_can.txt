; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\output\stm32f10x_can.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\output\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Drivers\CMSIS -I..\Drivers\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\Drivers\BSP\SYS -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\USART -I..\Middlewares\FreeRTOS\include -I..\Middlewares\FreeRTOS\portable\RVDS\ARM_CM3 -I..\Drivers\BSP\LED -I..\Drivers\BSP\OLED -I..\Drivers\BSP\TIM -I..\Drivers\BSP\PWM -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\SYS -ID:\AppData\keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=540 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\output\stm32f10x_can.crf ..\Drivers\STM32F10x_StdPeriph_Driver\src\stm32f10x_can.c]
                          THUMB

                          AREA ||i.CAN_CancelTransmit||, CODE, READONLY, ALIGN=1

                  CAN_CancelTransmit PROC
;;;641      */
;;;642    void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
000000  b121              CBZ      r1,|L1.12|
;;;643    {
;;;644      /* Check the parameters */
;;;645      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;646      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;647      /* abort transmission */
;;;648      switch (Mailbox)
000002  2901              CMP      r1,#1
000004  d007              BEQ      |L1.22|
000006  2902              CMP      r1,#2
000008  d10f              BNE      |L1.42|
00000a  e009              B        |L1.32|
                  |L1.12|
;;;649      {
;;;650        case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
00000c  6882              LDR      r2,[r0,#8]
00000e  f0420280          ORR      r2,r2,#0x80
000012  6082              STR      r2,[r0,#8]
;;;651          break;
000014  e00a              B        |L1.44|
                  |L1.22|
;;;652        case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
000016  6882              LDR      r2,[r0,#8]
000018  f4424200          ORR      r2,r2,#0x8000
00001c  6082              STR      r2,[r0,#8]
;;;653          break;
00001e  e005              B        |L1.44|
                  |L1.32|
;;;654        case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
000020  6882              LDR      r2,[r0,#8]
000022  f4420200          ORR      r2,r2,#0x800000
000026  6082              STR      r2,[r0,#8]
;;;655          break;
000028  e000              B        |L1.44|
                  |L1.42|
;;;656        default:
;;;657          break;
00002a  bf00              NOP      
                  |L1.44|
00002c  bf00              NOP                            ;651
;;;658      }
;;;659    }
00002e  4770              BX       lr
;;;660    
                          ENDP


                          AREA ||i.CAN_ClearFlag||, CODE, READONLY, ALIGN=2

                  CAN_ClearFlag PROC
;;;1141     */
;;;1142   void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  2200              MOVS     r2,#0
;;;1143   {
;;;1144     uint32_t flagtmp=0;
;;;1145     /* Check the parameters */
;;;1146     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1147     assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
;;;1148     
;;;1149     if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
000002  4b0c              LDR      r3,|L2.52|
000004  4299              CMP      r1,r3
000006  d102              BNE      |L2.14|
;;;1150     {
;;;1151       /* Clear the selected CAN flags */
;;;1152       CANx->ESR = (uint32_t)RESET;
000008  2300              MOVS     r3,#0
00000a  6183              STR      r3,[r0,#0x18]
00000c  e011              B        |L2.50|
                  |L2.14|
;;;1153     }
;;;1154     else /* MSR or TSR or RF0R or RF1R */
;;;1155     {
;;;1156       flagtmp = CAN_FLAG & 0x000FFFFF;
00000e  f3c10213          UBFX     r2,r1,#0,#20
;;;1157   
;;;1158       if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
000012  f0017300          AND      r3,r1,#0x2000000
000016  b10b              CBZ      r3,|L2.28|
;;;1159       {
;;;1160         /* Receive Flags */
;;;1161         CANx->RF0R = (uint32_t)(flagtmp);
000018  60c2              STR      r2,[r0,#0xc]
00001a  e00a              B        |L2.50|
                  |L2.28|
;;;1162       }
;;;1163       else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
00001c  f0016380          AND      r3,r1,#0x4000000
000020  b10b              CBZ      r3,|L2.38|
;;;1164       {
;;;1165         /* Receive Flags */
;;;1166         CANx->RF1R = (uint32_t)(flagtmp);
000022  6102              STR      r2,[r0,#0x10]
000024  e005              B        |L2.50|
                  |L2.38|
;;;1167       }
;;;1168       else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
000026  f0016300          AND      r3,r1,#0x8000000
00002a  b10b              CBZ      r3,|L2.48|
;;;1169       {
;;;1170         /* Transmit Flags */
;;;1171         CANx->TSR = (uint32_t)(flagtmp);
00002c  6082              STR      r2,[r0,#8]
00002e  e000              B        |L2.50|
                  |L2.48|
;;;1172       }
;;;1173       else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
;;;1174       {
;;;1175         /* Operating mode Flags */
;;;1176         CANx->MSR = (uint32_t)(flagtmp);
000030  6042              STR      r2,[r0,#4]
                  |L2.50|
;;;1177       }
;;;1178     }
;;;1179   }
000032  4770              BX       lr
;;;1180   
                          ENDP

                  |L2.52|
                          DCD      0x30f00070

                          AREA ||i.CAN_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  CAN_ClearITPendingBit PROC
;;;1304     */
;;;1305   void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  f5b17f00          CMP      r1,#0x200
;;;1306   {
;;;1307     /* Check the parameters */
;;;1308     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1309     assert_param(IS_CAN_CLEAR_IT(CAN_IT));
;;;1310   
;;;1311     switch (CAN_IT)
000004  d03a              BEQ      |L3.124|
000006  dc0f              BGT      |L3.40|
000008  2920              CMP      r1,#0x20
00000a  d028              BEQ      |L3.94|
00000c  dc06              BGT      |L3.28|
00000e  2901              CMP      r1,#1
000010  d01c              BEQ      |L3.76|
000012  2904              CMP      r1,#4
000014  d01d              BEQ      |L3.82|
000016  2908              CMP      r1,#8
000018  d140              BNE      |L3.156|
00001a  e01d              B        |L3.88|
                  |L3.28|
00001c  2940              CMP      r1,#0x40
00001e  d021              BEQ      |L3.100|
000020  f5b17f80          CMP      r1,#0x100
000024  d13a              BNE      |L3.156|
000026  e026              B        |L3.118|
                  |L3.40|
000028  f5b14f00          CMP      r1,#0x8000
00002c  d031              BEQ      |L3.146|
00002e  dc06              BGT      |L3.62|
000030  f5b16f80          CMP      r1,#0x400
000034  d025              BEQ      |L3.130|
000036  f5b16f00          CMP      r1,#0x800
00003a  d12f              BNE      |L3.156|
00003c  e024              B        |L3.136|
                  |L3.62|
00003e  f5b13f80          CMP      r1,#0x10000
000042  d012              BEQ      |L3.106|
000044  f5b13f00          CMP      r1,#0x20000
000048  d128              BNE      |L3.156|
00004a  e011              B        |L3.112|
                  |L3.76|
;;;1312     {
;;;1313         case CAN_IT_TME:
;;;1314                 /* Clear CAN_TSR_RQCPx (rc_w1)*/
;;;1315   	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
00004c  4a15              LDR      r2,|L3.164|
00004e  6082              STR      r2,[r0,#8]
;;;1316   	      break;
000050  e025              B        |L3.158|
                  |L3.82|
;;;1317         case CAN_IT_FF0:
;;;1318                 /* Clear CAN_RF0R_FULL0 (rc_w1)*/
;;;1319   	      CANx->RF0R = CAN_RF0R_FULL0; 
000052  2208              MOVS     r2,#8
000054  60c2              STR      r2,[r0,#0xc]
;;;1320   	      break;
000056  e022              B        |L3.158|
                  |L3.88|
;;;1321         case CAN_IT_FOV0:
;;;1322                 /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
;;;1323   	      CANx->RF0R = CAN_RF0R_FOVR0; 
000058  2210              MOVS     r2,#0x10
00005a  60c2              STR      r2,[r0,#0xc]
;;;1324   	      break;
00005c  e01f              B        |L3.158|
                  |L3.94|
;;;1325         case CAN_IT_FF1:
;;;1326                 /* Clear CAN_RF1R_FULL1 (rc_w1)*/
;;;1327   	      CANx->RF1R = CAN_RF1R_FULL1;  
00005e  2208              MOVS     r2,#8
000060  6102              STR      r2,[r0,#0x10]
;;;1328   	      break;
000062  e01c              B        |L3.158|
                  |L3.100|
;;;1329         case CAN_IT_FOV1:
;;;1330                 /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
;;;1331   	      CANx->RF1R = CAN_RF1R_FOVR1; 
000064  2210              MOVS     r2,#0x10
000066  6102              STR      r2,[r0,#0x10]
;;;1332   	      break;
000068  e019              B        |L3.158|
                  |L3.106|
;;;1333         case CAN_IT_WKU:
;;;1334                 /* Clear CAN_MSR_WKUI (rc_w1)*/
;;;1335   	      CANx->MSR = CAN_MSR_WKUI;  
00006a  2208              MOVS     r2,#8
00006c  6042              STR      r2,[r0,#4]
;;;1336   	      break;
00006e  e016              B        |L3.158|
                  |L3.112|
;;;1337         case CAN_IT_SLK:
;;;1338                 /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
;;;1339   	      CANx->MSR = CAN_MSR_SLAKI;   
000070  2210              MOVS     r2,#0x10
000072  6042              STR      r2,[r0,#4]
;;;1340   	      break;
000074  e013              B        |L3.158|
                  |L3.118|
;;;1341         case CAN_IT_EWG:
;;;1342                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1343   	      CANx->MSR = CAN_MSR_ERRI;
000076  2204              MOVS     r2,#4
000078  6042              STR      r2,[r0,#4]
;;;1344                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1345                           of the CAN Bus status*/ 
;;;1346   	      break;
00007a  e010              B        |L3.158|
                  |L3.124|
;;;1347         case CAN_IT_EPV:
;;;1348                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1349   	      CANx->MSR = CAN_MSR_ERRI; 
00007c  2204              MOVS     r2,#4
00007e  6042              STR      r2,[r0,#4]
;;;1350                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1351                           of the CAN Bus status*/
;;;1352   	      break;
000080  e00d              B        |L3.158|
                  |L3.130|
;;;1353         case CAN_IT_BOF:
;;;1354                 /* Clear CAN_MSR_ERRI (rc_w1) */ 
;;;1355   	      CANx->MSR = CAN_MSR_ERRI; 
000082  2204              MOVS     r2,#4
000084  6042              STR      r2,[r0,#4]
;;;1356                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1357                           of the CAN Bus status*/
;;;1358   	      break;
000086  e00a              B        |L3.158|
                  |L3.136|
;;;1359         case CAN_IT_LEC:
;;;1360                 /*  Clear LEC bits */
;;;1361   	      CANx->ESR = RESET; 
000088  2200              MOVS     r2,#0
00008a  6182              STR      r2,[r0,#0x18]
;;;1362                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1363   	      CANx->MSR = CAN_MSR_ERRI; 
00008c  2204              MOVS     r2,#4
00008e  6042              STR      r2,[r0,#4]
;;;1364   	      break;
000090  e005              B        |L3.158|
                  |L3.146|
;;;1365         case CAN_IT_ERR:
;;;1366                 /*Clear LEC bits */
;;;1367   	      CANx->ESR = RESET; 
000092  2200              MOVS     r2,#0
000094  6182              STR      r2,[r0,#0x18]
;;;1368                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1369   	      CANx->MSR = CAN_MSR_ERRI; 
000096  2204              MOVS     r2,#4
000098  6042              STR      r2,[r0,#4]
;;;1370   	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
;;;1371                     of the CAN Bus status*/
;;;1372   	      break;
00009a  e000              B        |L3.158|
                  |L3.156|
;;;1373         default :
;;;1374   	      break;
00009c  bf00              NOP      
                  |L3.158|
00009e  bf00              NOP                            ;1316
;;;1375      }
;;;1376   }
0000a0  4770              BX       lr
;;;1377   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L3.164|
                          DCD      0x00010101

                          AREA ||i.CAN_DBGFreeze||, CODE, READONLY, ALIGN=1

                  CAN_DBGFreeze PROC
;;;449      */
;;;450    void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
000000  b121              CBZ      r1,|L4.12|
;;;451    {
;;;452      /* Check the parameters */
;;;453      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;454      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;455      
;;;456      if (NewState != DISABLE)
;;;457      {
;;;458        /* Enable Debug Freeze  */
;;;459        CANx->MCR |= MCR_DBF;
000002  6802              LDR      r2,[r0,#0]
000004  f4423280          ORR      r2,r2,#0x10000
000008  6002              STR      r2,[r0,#0]
00000a  e003              B        |L4.20|
                  |L4.12|
;;;460      }
;;;461      else
;;;462      {
;;;463        /* Disable Debug Freeze */
;;;464        CANx->MCR &= ~MCR_DBF;
00000c  6802              LDR      r2,[r0,#0]
00000e  f4223280          BIC      r2,r2,#0x10000
000012  6002              STR      r2,[r0,#0]
                  |L4.20|
;;;465      }
;;;466    }
000014  4770              BX       lr
;;;467    
                          ENDP


                          AREA ||i.CAN_DeInit||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;120      */
;;;121    void CAN_DeInit(CAN_TypeDef* CANx)
000000  b510              PUSH     {r4,lr}
;;;122    {
000002  4604              MOV      r4,r0
;;;123      /* Check the parameters */
;;;124      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;125     
;;;126      if (CANx == CAN1)
000004  480b              LDR      r0,|L5.52|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L5.30|
;;;127      {
;;;128        /* Enable CAN1 reset state */
;;;129        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0648              LSLS     r0,r1,#25
00000e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;130        /* Release CAN1 from reset state */
;;;131        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f04f7000          MOV      r0,#0x2000000
000018  f7fffffe          BL       RCC_APB1PeriphResetCmd
00001c  e008              B        |L5.48|
                  |L5.30|
;;;132      }
;;;133      else
;;;134      {  
;;;135        /* Enable CAN2 reset state */
;;;136        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
00001e  2101              MOVS     r1,#1
000020  0688              LSLS     r0,r1,#26
000022  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;137        /* Release CAN2 from reset state */
;;;138        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
000026  2100              MOVS     r1,#0
000028  f04f6080          MOV      r0,#0x4000000
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L5.48|
;;;139      }
;;;140    }
000030  bd10              POP      {r4,pc}
;;;141    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0x40006400

                          AREA ||i.CAN_FIFORelease||, CODE, READONLY, ALIGN=1

                  CAN_FIFORelease PROC
;;;718      */
;;;719    void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  b921              CBNZ     r1,|L6.12|
;;;720    {
;;;721      /* Check the parameters */
;;;722      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;723      assert_param(IS_CAN_FIFO(FIFONumber));
;;;724      /* Release FIFO0 */
;;;725      if (FIFONumber == CAN_FIFO0)
;;;726      {
;;;727        CANx->RF0R |= CAN_RF0R_RFOM0;
000002  68c2              LDR      r2,[r0,#0xc]
000004  f0420220          ORR      r2,r2,#0x20
000008  60c2              STR      r2,[r0,#0xc]
00000a  e003              B        |L6.20|
                  |L6.12|
;;;728      }
;;;729      /* Release FIFO1 */
;;;730      else /* FIFONumber == CAN_FIFO1 */
;;;731      {
;;;732        CANx->RF1R |= CAN_RF1R_RFOM1;
00000c  6902              LDR      r2,[r0,#0x10]
00000e  f0420220          ORR      r2,r2,#0x20
000012  6102              STR      r2,[r0,#0x10]
                  |L6.20|
;;;733      }
;;;734    }
000014  4770              BX       lr
;;;735    
                          ENDP


                          AREA ||i.CAN_FilterInit||, CODE, READONLY, ALIGN=2

                  CAN_FilterInit PROC
;;;290      */
;;;291    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
000000  b510              PUSH     {r4,lr}
;;;292    {
;;;293      uint32_t filter_number_bit_pos = 0;
000002  2100              MOVS     r1,#0
;;;294      /* Check the parameters */
;;;295      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;296      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;297      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;298      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;299      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;300    
;;;301      filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
000004  7a83              LDRB     r3,[r0,#0xa]
000006  2201              MOVS     r2,#1
000008  fa02f103          LSL      r1,r2,r3
;;;302    
;;;303      /* Initialisation mode for the filter */
;;;304      CAN1->FMR |= FMR_FINIT;
00000c  4a3d              LDR      r2,|L7.260|
00000e  6812              LDR      r2,[r2,#0]
000010  f0420201          ORR      r2,r2,#1
000014  4b3b              LDR      r3,|L7.260|
000016  601a              STR      r2,[r3,#0]
;;;305    
;;;306      /* Filter Deactivation */
;;;307      CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
000018  4a3a              LDR      r2,|L7.260|
00001a  321c              ADDS     r2,r2,#0x1c
00001c  6812              LDR      r2,[r2,#0]
00001e  438a              BICS     r2,r2,r1
000020  4b38              LDR      r3,|L7.260|
000022  331c              ADDS     r3,r3,#0x1c
000024  601a              STR      r2,[r3,#0]
;;;308    
;;;309      /* Filter Scale */
;;;310      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
000026  7b02              LDRB     r2,[r0,#0xc]
000028  b9ca              CBNZ     r2,|L7.94|
;;;311      {
;;;312        /* 16-bit scale for the filter */
;;;313        CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
00002a  4a36              LDR      r2,|L7.260|
00002c  320c              ADDS     r2,r2,#0xc
00002e  6812              LDR      r2,[r2,#0]
000030  438a              BICS     r2,r2,r1
000032  4b34              LDR      r3,|L7.260|
000034  330c              ADDS     r3,r3,#0xc
000036  601a              STR      r2,[r3,#0]
;;;314    
;;;315        /* First 16-bit identifier and First 16-bit mask */
;;;316        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;317        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000038  8842              LDRH     r2,[r0,#2]
00003a  88c3              LDRH     r3,[r0,#6]
00003c  ea424303          ORR      r3,r2,r3,LSL #16
000040  4a30              LDR      r2,|L7.260|
000042  3240              ADDS     r2,r2,#0x40
000044  7a84              LDRB     r4,[r0,#0xa]
000046  f8423034          STR      r3,[r2,r4,LSL #3]
;;;318        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;319            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;320    
;;;321        /* Second 16-bit identifier and Second 16-bit mask */
;;;322        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;323        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
00004a  8802              LDRH     r2,[r0,#0]
00004c  8883              LDRH     r3,[r0,#4]
00004e  ea424303          ORR      r3,r2,r3,LSL #16
000052  4a2c              LDR      r2,|L7.260|
000054  3240              ADDS     r2,r2,#0x40
000056  7a84              LDRB     r4,[r0,#0xa]
000058  eb0202c4          ADD      r2,r2,r4,LSL #3
00005c  6053              STR      r3,[r2,#4]
                  |L7.94|
;;;324        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;325            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;326      }
;;;327    
;;;328      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
00005e  7b02              LDRB     r2,[r0,#0xc]
000060  2a01              CMP      r2,#1
000062  d119              BNE      |L7.152|
;;;329      {
;;;330        /* 32-bit scale for the filter */
;;;331        CAN1->FS1R |= filter_number_bit_pos;
000064  4a27              LDR      r2,|L7.260|
000066  320c              ADDS     r2,r2,#0xc
000068  6812              LDR      r2,[r2,#0]
00006a  430a              ORRS     r2,r2,r1
00006c  4b25              LDR      r3,|L7.260|
00006e  330c              ADDS     r3,r3,#0xc
000070  601a              STR      r2,[r3,#0]
;;;332        /* 32-bit identifier or First 32-bit identifier */
;;;333        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000072  8842              LDRH     r2,[r0,#2]
000074  8803              LDRH     r3,[r0,#0]
000076  ea424303          ORR      r3,r2,r3,LSL #16
00007a  4a22              LDR      r2,|L7.260|
00007c  3240              ADDS     r2,r2,#0x40
00007e  7a84              LDRB     r4,[r0,#0xa]
000080  f8423034          STR      r3,[r2,r4,LSL #3]
;;;334        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;335            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;336        /* 32-bit mask or Second 32-bit identifier */
;;;337        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000084  88c2              LDRH     r2,[r0,#6]
000086  8883              LDRH     r3,[r0,#4]
000088  ea424303          ORR      r3,r2,r3,LSL #16
00008c  4a1d              LDR      r2,|L7.260|
00008e  3240              ADDS     r2,r2,#0x40
000090  7a84              LDRB     r4,[r0,#0xa]
000092  eb0202c4          ADD      r2,r2,r4,LSL #3
000096  6053              STR      r3,[r2,#4]
                  |L7.152|
;;;338        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;339            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;340      }
;;;341    
;;;342      /* Filter Mode */
;;;343      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
000098  7ac2              LDRB     r2,[r0,#0xb]
00009a  b93a              CBNZ     r2,|L7.172|
;;;344      {
;;;345        /*Id/Mask mode for the filter*/
;;;346        CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
00009c  4a19              LDR      r2,|L7.260|
00009e  1d12              ADDS     r2,r2,#4
0000a0  6812              LDR      r2,[r2,#0]
0000a2  438a              BICS     r2,r2,r1
0000a4  4b17              LDR      r3,|L7.260|
0000a6  1d1b              ADDS     r3,r3,#4
0000a8  601a              STR      r2,[r3,#0]
0000aa  e006              B        |L7.186|
                  |L7.172|
;;;347      }
;;;348      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;349      {
;;;350        /*Identifier list mode for the filter*/
;;;351        CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
0000ac  4a15              LDR      r2,|L7.260|
0000ae  1d12              ADDS     r2,r2,#4
0000b0  6812              LDR      r2,[r2,#0]
0000b2  430a              ORRS     r2,r2,r1
0000b4  4b13              LDR      r3,|L7.260|
0000b6  1d1b              ADDS     r3,r3,#4
0000b8  601a              STR      r2,[r3,#0]
                  |L7.186|
;;;352      }
;;;353    
;;;354      /* Filter FIFO assignment */
;;;355      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
0000ba  8902              LDRH     r2,[r0,#8]
0000bc  b932              CBNZ     r2,|L7.204|
;;;356      {
;;;357        /* FIFO 0 assignation for the filter */
;;;358        CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
0000be  4a11              LDR      r2,|L7.260|
0000c0  3214              ADDS     r2,r2,#0x14
0000c2  6812              LDR      r2,[r2,#0]
0000c4  438a              BICS     r2,r2,r1
0000c6  4b0f              LDR      r3,|L7.260|
0000c8  3314              ADDS     r3,r3,#0x14
0000ca  601a              STR      r2,[r3,#0]
                  |L7.204|
;;;359      }
;;;360    
;;;361      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
0000cc  8902              LDRH     r2,[r0,#8]
0000ce  2a01              CMP      r2,#1
0000d0  d106              BNE      |L7.224|
;;;362      {
;;;363        /* FIFO 1 assignation for the filter */
;;;364        CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
0000d2  4a0c              LDR      r2,|L7.260|
0000d4  3214              ADDS     r2,r2,#0x14
0000d6  6812              LDR      r2,[r2,#0]
0000d8  430a              ORRS     r2,r2,r1
0000da  4b0a              LDR      r3,|L7.260|
0000dc  3314              ADDS     r3,r3,#0x14
0000de  601a              STR      r2,[r3,#0]
                  |L7.224|
;;;365      }
;;;366      
;;;367      /* Filter activation */
;;;368      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
0000e0  7b42              LDRB     r2,[r0,#0xd]
0000e2  2a01              CMP      r2,#1
0000e4  d106              BNE      |L7.244|
;;;369      {
;;;370        CAN1->FA1R |= filter_number_bit_pos;
0000e6  4a07              LDR      r2,|L7.260|
0000e8  321c              ADDS     r2,r2,#0x1c
0000ea  6812              LDR      r2,[r2,#0]
0000ec  430a              ORRS     r2,r2,r1
0000ee  4b05              LDR      r3,|L7.260|
0000f0  331c              ADDS     r3,r3,#0x1c
0000f2  601a              STR      r2,[r3,#0]
                  |L7.244|
;;;371      }
;;;372    
;;;373      /* Leave the initialisation mode for the filter */
;;;374      CAN1->FMR &= ~FMR_FINIT;
0000f4  4a03              LDR      r2,|L7.260|
0000f6  6812              LDR      r2,[r2,#0]
0000f8  f0220201          BIC      r2,r2,#1
0000fc  4b01              LDR      r3,|L7.260|
0000fe  601a              STR      r2,[r3,#0]
;;;375    }
000100  bd10              POP      {r4,pc}
;;;376    
                          ENDP

000102  0000              DCW      0x0000
                  |L7.260|
                          DCD      0x40006600

                          AREA ||i.CAN_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  CAN_GetFlagStatus PROC
;;;1041     */
;;;1042   FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  b510              PUSH     {r4,lr}
;;;1043   {
000002  4602              MOV      r2,r0
;;;1044     FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1045     
;;;1046     /* Check the parameters */
;;;1047     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1048     assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
;;;1049     
;;;1050   
;;;1051     if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
000006  f4010370          AND      r3,r1,#0xf00000
00000a  b143              CBZ      r3,|L8.30|
;;;1052     { 
;;;1053       /* Check the status of the specified CAN flag */
;;;1054       if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
00000c  6993              LDR      r3,[r2,#0x18]
00000e  f3c10413          UBFX     r4,r1,#0,#20
000012  4023              ANDS     r3,r3,r4
000014  b10b              CBZ      r3,|L8.26|
;;;1055       { 
;;;1056         /* CAN_FLAG is set */
;;;1057         bitstatus = SET;
000016  2001              MOVS     r0,#1
000018  e02d              B        |L8.118|
                  |L8.26|
;;;1058       }
;;;1059       else
;;;1060       { 
;;;1061         /* CAN_FLAG is reset */
;;;1062         bitstatus = RESET;
00001a  2000              MOVS     r0,#0
00001c  e02b              B        |L8.118|
                  |L8.30|
;;;1063       }
;;;1064     }
;;;1065     else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
00001e  f0017380          AND      r3,r1,#0x1000000
000022  b143              CBZ      r3,|L8.54|
;;;1066     { 
;;;1067       /* Check the status of the specified CAN flag */
;;;1068       if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
000024  6853              LDR      r3,[r2,#4]
000026  f3c10413          UBFX     r4,r1,#0,#20
00002a  4023              ANDS     r3,r3,r4
00002c  b10b              CBZ      r3,|L8.50|
;;;1069       { 
;;;1070         /* CAN_FLAG is set */
;;;1071         bitstatus = SET;
00002e  2001              MOVS     r0,#1
000030  e021              B        |L8.118|
                  |L8.50|
;;;1072       }
;;;1073       else
;;;1074       { 
;;;1075         /* CAN_FLAG is reset */
;;;1076         bitstatus = RESET;
000032  2000              MOVS     r0,#0
000034  e01f              B        |L8.118|
                  |L8.54|
;;;1077       }
;;;1078     }
;;;1079     else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
000036  f0016300          AND      r3,r1,#0x8000000
00003a  b143              CBZ      r3,|L8.78|
;;;1080     { 
;;;1081       /* Check the status of the specified CAN flag */
;;;1082       if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
00003c  6893              LDR      r3,[r2,#8]
00003e  f3c10413          UBFX     r4,r1,#0,#20
000042  4023              ANDS     r3,r3,r4
000044  b10b              CBZ      r3,|L8.74|
;;;1083       { 
;;;1084         /* CAN_FLAG is set */
;;;1085         bitstatus = SET;
000046  2001              MOVS     r0,#1
000048  e015              B        |L8.118|
                  |L8.74|
;;;1086       }
;;;1087       else
;;;1088       { 
;;;1089         /* CAN_FLAG is reset */
;;;1090         bitstatus = RESET;
00004a  2000              MOVS     r0,#0
00004c  e013              B        |L8.118|
                  |L8.78|
;;;1091       }
;;;1092     }
;;;1093     else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
00004e  f0017300          AND      r3,r1,#0x2000000
000052  b143              CBZ      r3,|L8.102|
;;;1094     { 
;;;1095       /* Check the status of the specified CAN flag */
;;;1096       if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
000054  68d3              LDR      r3,[r2,#0xc]
000056  f3c10413          UBFX     r4,r1,#0,#20
00005a  4023              ANDS     r3,r3,r4
00005c  b10b              CBZ      r3,|L8.98|
;;;1097       { 
;;;1098         /* CAN_FLAG is set */
;;;1099         bitstatus = SET;
00005e  2001              MOVS     r0,#1
000060  e009              B        |L8.118|
                  |L8.98|
;;;1100       }
;;;1101       else
;;;1102       { 
;;;1103         /* CAN_FLAG is reset */
;;;1104         bitstatus = RESET;
000062  2000              MOVS     r0,#0
000064  e007              B        |L8.118|
                  |L8.102|
;;;1105       }
;;;1106     }
;;;1107     else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
;;;1108     { 
;;;1109       /* Check the status of the specified CAN flag */
;;;1110       if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
000066  6913              LDR      r3,[r2,#0x10]
000068  f3c10413          UBFX     r4,r1,#0,#20
00006c  4023              ANDS     r3,r3,r4
00006e  b10b              CBZ      r3,|L8.116|
;;;1111       { 
;;;1112         /* CAN_FLAG is set */
;;;1113         bitstatus = SET;
000070  2001              MOVS     r0,#1
000072  e000              B        |L8.118|
                  |L8.116|
;;;1114       }
;;;1115       else
;;;1116       { 
;;;1117         /* CAN_FLAG is reset */
;;;1118         bitstatus = RESET;
000074  2000              MOVS     r0,#0
                  |L8.118|
;;;1119       }
;;;1120     }
;;;1121     /* Return the CAN_FLAG status */
;;;1122     return  bitstatus;
;;;1123   }
000076  bd10              POP      {r4,pc}
;;;1124   
                          ENDP


                          AREA ||i.CAN_GetITStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetITStatus PROC
;;;1201     */
;;;1202   ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;1203   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1204     ITStatus itstatus = RESET;
000006  2600              MOVS     r6,#0
;;;1205     /* Check the parameters */
;;;1206     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1207     assert_param(IS_CAN_IT(CAN_IT));
;;;1208     
;;;1209     /* check the enable interrupt bit */
;;;1210    if((CANx->IER & CAN_IT) != RESET)
000008  6960              LDR      r0,[r4,#0x14]
00000a  4028              ANDS     r0,r0,r5
00000c  2800              CMP      r0,#0
00000e  d071              BEQ      |L9.244|
;;;1211    {
;;;1212      /* in case the Interrupt is enabled, .... */
;;;1213       switch (CAN_IT)
000010  f5b57f80          CMP      r5,#0x100
000014  d05c              BEQ      |L9.208|
000016  dc10              BGT      |L9.58|
000018  2d08              CMP      r5,#8
00001a  d035              BEQ      |L9.136|
00001c  dc06              BGT      |L9.44|
00001e  2d01              CMP      r5,#1
000020  d020              BEQ      |L9.100|
000022  2d02              CMP      r5,#2
000024  d024              BEQ      |L9.112|
000026  2d04              CMP      r5,#4
000028  d172              BNE      |L9.272|
00002a  e027              B        |L9.124|
                  |L9.44|
00002c  2d10              CMP      r5,#0x10
00002e  d031              BEQ      |L9.148|
000030  2d20              CMP      r5,#0x20
000032  d035              BEQ      |L9.160|
000034  2d40              CMP      r5,#0x40
000036  d16b              BNE      |L9.272|
000038  e038              B        |L9.172|
                  |L9.58|
00003a  f5b54f00          CMP      r5,#0x8000
00003e  d060              BEQ      |L9.258|
000040  dc09              BGT      |L9.86|
000042  f5b57f00          CMP      r5,#0x200
000046  d049              BEQ      |L9.220|
000048  f5b56f80          CMP      r5,#0x400
00004c  d04c              BEQ      |L9.232|
00004e  f5b56f00          CMP      r5,#0x800
000052  d15d              BNE      |L9.272|
000054  e04f              B        |L9.246|
                  |L9.86|
000056  f5b53f80          CMP      r5,#0x10000
00005a  d02d              BEQ      |L9.184|
00005c  f5b53f00          CMP      r5,#0x20000
000060  d156              BNE      |L9.272|
000062  e02f              B        |L9.196|
                  |L9.100|
;;;1214       {
;;;1215         case CAN_IT_TME:
;;;1216                  /* Check CAN_TSR_RQCPx bits */
;;;1217   	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
000064  68a0              LDR      r0,[r4,#8]
000066  492d              LDR      r1,|L9.284|
000068  f7fffffe          BL       CheckITStatus
00006c  4606              MOV      r6,r0
;;;1218   	      break;
00006e  e051              B        |L9.276|
                  |L9.112|
;;;1219         case CAN_IT_FMP0:
;;;1220                  /* Check CAN_RF0R_FMP0 bit */
;;;1221   	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
000070  68e0              LDR      r0,[r4,#0xc]
000072  2103              MOVS     r1,#3
000074  f7fffffe          BL       CheckITStatus
000078  4606              MOV      r6,r0
;;;1222   	      break;
00007a  e04b              B        |L9.276|
                  |L9.124|
;;;1223         case CAN_IT_FF0:
;;;1224                  /* Check CAN_RF0R_FULL0 bit */
;;;1225                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
00007c  68e0              LDR      r0,[r4,#0xc]
00007e  2108              MOVS     r1,#8
000080  f7fffffe          BL       CheckITStatus
000084  4606              MOV      r6,r0
;;;1226   	      break;
000086  e045              B        |L9.276|
                  |L9.136|
;;;1227         case CAN_IT_FOV0:
;;;1228                  /* Check CAN_RF0R_FOVR0 bit */
;;;1229                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
000088  68e0              LDR      r0,[r4,#0xc]
00008a  2110              MOVS     r1,#0x10
00008c  f7fffffe          BL       CheckITStatus
000090  4606              MOV      r6,r0
;;;1230   	      break;
000092  e03f              B        |L9.276|
                  |L9.148|
;;;1231         case CAN_IT_FMP1:
;;;1232                  /* Check CAN_RF1R_FMP1 bit */
;;;1233                  itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
000094  6920              LDR      r0,[r4,#0x10]
000096  2103              MOVS     r1,#3
000098  f7fffffe          BL       CheckITStatus
00009c  4606              MOV      r6,r0
;;;1234   	      break;
00009e  e039              B        |L9.276|
                  |L9.160|
;;;1235         case CAN_IT_FF1:
;;;1236                  /* Check CAN_RF1R_FULL1 bit */
;;;1237   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
0000a0  6920              LDR      r0,[r4,#0x10]
0000a2  2108              MOVS     r1,#8
0000a4  f7fffffe          BL       CheckITStatus
0000a8  4606              MOV      r6,r0
;;;1238   	      break;
0000aa  e033              B        |L9.276|
                  |L9.172|
;;;1239         case CAN_IT_FOV1:
;;;1240                  /* Check CAN_RF1R_FOVR1 bit */
;;;1241   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
0000ac  6920              LDR      r0,[r4,#0x10]
0000ae  2110              MOVS     r1,#0x10
0000b0  f7fffffe          BL       CheckITStatus
0000b4  4606              MOV      r6,r0
;;;1242   	      break;
0000b6  e02d              B        |L9.276|
                  |L9.184|
;;;1243         case CAN_IT_WKU:
;;;1244                  /* Check CAN_MSR_WKUI bit */
;;;1245                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
0000b8  6860              LDR      r0,[r4,#4]
0000ba  2108              MOVS     r1,#8
0000bc  f7fffffe          BL       CheckITStatus
0000c0  4606              MOV      r6,r0
;;;1246   	      break;
0000c2  e027              B        |L9.276|
                  |L9.196|
;;;1247         case CAN_IT_SLK:
;;;1248                  /* Check CAN_MSR_SLAKI bit */
;;;1249   	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
0000c4  6860              LDR      r0,[r4,#4]
0000c6  2110              MOVS     r1,#0x10
0000c8  f7fffffe          BL       CheckITStatus
0000cc  4606              MOV      r6,r0
;;;1250   	      break;
0000ce  e021              B        |L9.276|
                  |L9.208|
;;;1251         case CAN_IT_EWG:
;;;1252                  /* Check CAN_ESR_EWGF bit */
;;;1253   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
0000d0  69a0              LDR      r0,[r4,#0x18]
0000d2  2101              MOVS     r1,#1
0000d4  f7fffffe          BL       CheckITStatus
0000d8  4606              MOV      r6,r0
;;;1254   	      break;
0000da  e01b              B        |L9.276|
                  |L9.220|
;;;1255         case CAN_IT_EPV:
;;;1256                  /* Check CAN_ESR_EPVF bit */
;;;1257   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
0000dc  69a0              LDR      r0,[r4,#0x18]
0000de  2102              MOVS     r1,#2
0000e0  f7fffffe          BL       CheckITStatus
0000e4  4606              MOV      r6,r0
;;;1258   	      break;
0000e6  e015              B        |L9.276|
                  |L9.232|
;;;1259         case CAN_IT_BOF:
;;;1260                  /* Check CAN_ESR_BOFF bit */
;;;1261   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
0000e8  69a0              LDR      r0,[r4,#0x18]
0000ea  2104              MOVS     r1,#4
0000ec  f7fffffe          BL       CheckITStatus
0000f0  4606              MOV      r6,r0
;;;1262   	      break;
0000f2  e00f              B        |L9.276|
                  |L9.244|
0000f4  e00f              B        |L9.278|
                  |L9.246|
;;;1263         case CAN_IT_LEC:
;;;1264                  /* Check CAN_ESR_LEC bit */
;;;1265   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
0000f6  69a0              LDR      r0,[r4,#0x18]
0000f8  2170              MOVS     r1,#0x70
0000fa  f7fffffe          BL       CheckITStatus
0000fe  4606              MOV      r6,r0
;;;1266   	      break;
000100  e008              B        |L9.276|
                  |L9.258|
;;;1267         case CAN_IT_ERR:
;;;1268                  /* Check CAN_MSR_ERRI bit */ 
;;;1269                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
000102  6860              LDR      r0,[r4,#4]
000104  2104              MOVS     r1,#4
000106  f7fffffe          BL       CheckITStatus
00010a  4606              MOV      r6,r0
;;;1270   	      break;
00010c  e002              B        |L9.276|
00010e  e7ff              B        |L9.272|
                  |L9.272|
;;;1271         default :
;;;1272                  /* in case of error, return RESET */
;;;1273                 itstatus = RESET;
000110  2600              MOVS     r6,#0
;;;1274                 break;
000112  bf00              NOP      
                  |L9.276|
000114  e000              B        |L9.280|
                  |L9.278|
;;;1275       }
;;;1276     }
;;;1277     else
;;;1278     {
;;;1279      /* in case the Interrupt is not enabled, return RESET */
;;;1280       itstatus  = RESET;
000116  2600              MOVS     r6,#0
                  |L9.280|
;;;1281     }
;;;1282     
;;;1283     /* Return the CAN_IT status */
;;;1284     return  itstatus;
000118  4630              MOV      r0,r6
;;;1285   }
00011a  bd70              POP      {r4-r6,pc}
;;;1286   
                          ENDP

                  |L9.284|
                          DCD      0x00010101

                          AREA ||i.CAN_GetLSBTransmitErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetLSBTransmitErrorCounter PROC
;;;964      */
;;;965    uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;966    {
;;;967      uint8_t counter=0;
000002  2000              MOVS     r0,#0
;;;968      
;;;969      /* Check the parameters */
;;;970      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;971      
;;;972      /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;973      counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
000004  698a              LDR      r2,[r1,#0x18]
000006  f3c24007          UBFX     r0,r2,#16,#8
;;;974      
;;;975      /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;976      return counter;
;;;977    }
00000a  4770              BX       lr
;;;978    
                          ENDP


                          AREA ||i.CAN_GetLastErrorCode||, CODE, READONLY, ALIGN=1

                  CAN_GetLastErrorCode PROC
;;;920     
;;;921    uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;922    {
;;;923      uint8_t errorcode=0;
000002  2000              MOVS     r0,#0
;;;924      
;;;925      /* Check the parameters */
;;;926      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;927      
;;;928      /* Get the error code*/
;;;929      errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
000004  698a              LDR      r2,[r1,#0x18]
000006  f0020070          AND      r0,r2,#0x70
;;;930      
;;;931      /* Return the error code*/
;;;932      return errorcode;
;;;933    }
00000a  4770              BX       lr
;;;934    /**
                          ENDP


                          AREA ||i.CAN_GetReceiveErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetReceiveErrorCounter PROC
;;;944      */
;;;945    uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;946    {
;;;947      uint8_t counter=0;
000002  2000              MOVS     r0,#0
;;;948      
;;;949      /* Check the parameters */
;;;950      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;951      
;;;952      /* Get the Receive Error Counter*/
;;;953      counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
000004  698a              LDR      r2,[r1,#0x18]
000006  0e10              LSRS     r0,r2,#24
;;;954      
;;;955      /* Return the Receive Error Counter*/
;;;956      return counter;
;;;957    }
000008  4770              BX       lr
;;;958    
                          ENDP


                          AREA ||i.CAN_ITConfig||, CODE, READONLY, ALIGN=1

                  CAN_ITConfig PROC
;;;1001     */
;;;1002   void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
000000  b11a              CBZ      r2,|L13.10|
;;;1003   {
;;;1004     /* Check the parameters */
;;;1005     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1006     assert_param(IS_CAN_IT(CAN_IT));
;;;1007     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1008   
;;;1009     if (NewState != DISABLE)
;;;1010     {
;;;1011       /* Enable the selected CANx interrupt */
;;;1012       CANx->IER |= CAN_IT;
000002  6943              LDR      r3,[r0,#0x14]
000004  430b              ORRS     r3,r3,r1
000006  6143              STR      r3,[r0,#0x14]
000008  e002              B        |L13.16|
                  |L13.10|
;;;1013     }
;;;1014     else
;;;1015     {
;;;1016       /* Disable the selected CANx interrupt */
;;;1017       CANx->IER &= ~CAN_IT;
00000a  6943              LDR      r3,[r0,#0x14]
00000c  438b              BICS     r3,r3,r1
00000e  6143              STR      r3,[r0,#0x14]
                  |L13.16|
;;;1018     }
;;;1019   }
000010  4770              BX       lr
;;;1020   /**
                          ENDP


                          AREA ||i.CAN_Init||, CODE, READONLY, ALIGN=1

                  CAN_Init PROC
;;;152      */
;;;153    uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;154    {
000002  4602              MOV      r2,r0
;;;155      uint8_t InitStatus = CAN_InitStatus_Failed;
000004  2000              MOVS     r0,#0
;;;156      uint32_t wait_ack = 0x00000000;
000006  2300              MOVS     r3,#0
;;;157      /* Check the parameters */
;;;158      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;159      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;160      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;161      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;162      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;163      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;164      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;165      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;166      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;167      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;168      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;169      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;170    
;;;171      /* Exit from sleep mode */
;;;172      CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
000008  6814              LDR      r4,[r2,#0]
00000a  f0240402          BIC      r4,r4,#2
00000e  6014              STR      r4,[r2,#0]
;;;173    
;;;174      /* Request initialisation */
;;;175      CANx->MCR |= CAN_MCR_INRQ ;
000010  6814              LDR      r4,[r2,#0]
000012  f0440401          ORR      r4,r4,#1
000016  6014              STR      r4,[r2,#0]
;;;176    
;;;177      /* Wait the acknowledge */
;;;178      while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
000018  e000              B        |L14.28|
                  |L14.26|
;;;179      {
;;;180        wait_ack++;
00001a  1c5b              ADDS     r3,r3,#1
                  |L14.28|
00001c  6854              LDR      r4,[r2,#4]            ;178
00001e  f0040401          AND      r4,r4,#1              ;178
000022  b91c              CBNZ     r4,|L14.44|
000024  f64f74ff          MOV      r4,#0xffff            ;178
000028  42a3              CMP      r3,r4                 ;178
00002a  d1f6              BNE      |L14.26|
                  |L14.44|
;;;181      }
;;;182    
;;;183      /* Check acknowledge */
;;;184      if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
00002c  6854              LDR      r4,[r2,#4]
00002e  f0040401          AND      r4,r4,#1
000032  b90c              CBNZ     r4,|L14.56|
;;;185      {
;;;186        InitStatus = CAN_InitStatus_Failed;
000034  2000              MOVS     r0,#0
000036  e06c              B        |L14.274|
                  |L14.56|
;;;187      }
;;;188      else 
;;;189      {
;;;190        /* Set the time triggered communication mode */
;;;191        if (CAN_InitStruct->CAN_TTCM == ENABLE)
000038  798c              LDRB     r4,[r1,#6]
00003a  2c01              CMP      r4,#1
00003c  d104              BNE      |L14.72|
;;;192        {
;;;193          CANx->MCR |= CAN_MCR_TTCM;
00003e  6814              LDR      r4,[r2,#0]
000040  f0440480          ORR      r4,r4,#0x80
000044  6014              STR      r4,[r2,#0]
000046  e003              B        |L14.80|
                  |L14.72|
;;;194        }
;;;195        else
;;;196        {
;;;197          CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
000048  6814              LDR      r4,[r2,#0]
00004a  f0240480          BIC      r4,r4,#0x80
00004e  6014              STR      r4,[r2,#0]
                  |L14.80|
;;;198        }
;;;199    
;;;200        /* Set the automatic bus-off management */
;;;201        if (CAN_InitStruct->CAN_ABOM == ENABLE)
000050  79cc              LDRB     r4,[r1,#7]
000052  2c01              CMP      r4,#1
000054  d104              BNE      |L14.96|
;;;202        {
;;;203          CANx->MCR |= CAN_MCR_ABOM;
000056  6814              LDR      r4,[r2,#0]
000058  f0440440          ORR      r4,r4,#0x40
00005c  6014              STR      r4,[r2,#0]
00005e  e003              B        |L14.104|
                  |L14.96|
;;;204        }
;;;205        else
;;;206        {
;;;207          CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
000060  6814              LDR      r4,[r2,#0]
000062  f0240440          BIC      r4,r4,#0x40
000066  6014              STR      r4,[r2,#0]
                  |L14.104|
;;;208        }
;;;209    
;;;210        /* Set the automatic wake-up mode */
;;;211        if (CAN_InitStruct->CAN_AWUM == ENABLE)
000068  7a0c              LDRB     r4,[r1,#8]
00006a  2c01              CMP      r4,#1
00006c  d104              BNE      |L14.120|
;;;212        {
;;;213          CANx->MCR |= CAN_MCR_AWUM;
00006e  6814              LDR      r4,[r2,#0]
000070  f0440420          ORR      r4,r4,#0x20
000074  6014              STR      r4,[r2,#0]
000076  e003              B        |L14.128|
                  |L14.120|
;;;214        }
;;;215        else
;;;216        {
;;;217          CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
000078  6814              LDR      r4,[r2,#0]
00007a  f0240420          BIC      r4,r4,#0x20
00007e  6014              STR      r4,[r2,#0]
                  |L14.128|
;;;218        }
;;;219    
;;;220        /* Set the no automatic retransmission */
;;;221        if (CAN_InitStruct->CAN_NART == ENABLE)
000080  7a4c              LDRB     r4,[r1,#9]
000082  2c01              CMP      r4,#1
000084  d104              BNE      |L14.144|
;;;222        {
;;;223          CANx->MCR |= CAN_MCR_NART;
000086  6814              LDR      r4,[r2,#0]
000088  f0440410          ORR      r4,r4,#0x10
00008c  6014              STR      r4,[r2,#0]
00008e  e003              B        |L14.152|
                  |L14.144|
;;;224        }
;;;225        else
;;;226        {
;;;227          CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
000090  6814              LDR      r4,[r2,#0]
000092  f0240410          BIC      r4,r4,#0x10
000096  6014              STR      r4,[r2,#0]
                  |L14.152|
;;;228        }
;;;229    
;;;230        /* Set the receive FIFO locked mode */
;;;231        if (CAN_InitStruct->CAN_RFLM == ENABLE)
000098  7a8c              LDRB     r4,[r1,#0xa]
00009a  2c01              CMP      r4,#1
00009c  d104              BNE      |L14.168|
;;;232        {
;;;233          CANx->MCR |= CAN_MCR_RFLM;
00009e  6814              LDR      r4,[r2,#0]
0000a0  f0440408          ORR      r4,r4,#8
0000a4  6014              STR      r4,[r2,#0]
0000a6  e003              B        |L14.176|
                  |L14.168|
;;;234        }
;;;235        else
;;;236        {
;;;237          CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
0000a8  6814              LDR      r4,[r2,#0]
0000aa  f0240408          BIC      r4,r4,#8
0000ae  6014              STR      r4,[r2,#0]
                  |L14.176|
;;;238        }
;;;239    
;;;240        /* Set the transmit FIFO priority */
;;;241        if (CAN_InitStruct->CAN_TXFP == ENABLE)
0000b0  7acc              LDRB     r4,[r1,#0xb]
0000b2  2c01              CMP      r4,#1
0000b4  d104              BNE      |L14.192|
;;;242        {
;;;243          CANx->MCR |= CAN_MCR_TXFP;
0000b6  6814              LDR      r4,[r2,#0]
0000b8  f0440404          ORR      r4,r4,#4
0000bc  6014              STR      r4,[r2,#0]
0000be  e003              B        |L14.200|
                  |L14.192|
;;;244        }
;;;245        else
;;;246        {
;;;247          CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
0000c0  6814              LDR      r4,[r2,#0]
0000c2  f0240404          BIC      r4,r4,#4
0000c6  6014              STR      r4,[r2,#0]
                  |L14.200|
;;;248        }
;;;249    
;;;250        /* Set the bit timing register */
;;;251        CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
0000c8  788c              LDRB     r4,[r1,#2]
0000ca  07a4              LSLS     r4,r4,#30
0000cc  78cd              LDRB     r5,[r1,#3]
0000ce  ea446405          ORR      r4,r4,r5,LSL #24
0000d2  790d              LDRB     r5,[r1,#4]
0000d4  ea444405          ORR      r4,r4,r5,LSL #16
0000d8  794d              LDRB     r5,[r1,#5]
0000da  ea445405          ORR      r4,r4,r5,LSL #20
0000de  880d              LDRH     r5,[r1,#0]
0000e0  1e6d              SUBS     r5,r5,#1
0000e2  432c              ORRS     r4,r4,r5
0000e4  61d4              STR      r4,[r2,#0x1c]
;;;252                    ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
;;;253                    ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
;;;254                    ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
;;;255                   ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
;;;256    
;;;257        /* Request leave initialisation */
;;;258        CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
0000e6  6814              LDR      r4,[r2,#0]
0000e8  f0240401          BIC      r4,r4,#1
0000ec  6014              STR      r4,[r2,#0]
;;;259    
;;;260       /* Wait the acknowledge */
;;;261       wait_ack = 0;
0000ee  2300              MOVS     r3,#0
;;;262    
;;;263       while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
0000f0  e000              B        |L14.244|
                  |L14.242|
;;;264       {
;;;265         wait_ack++;
0000f2  1c5b              ADDS     r3,r3,#1
                  |L14.244|
0000f4  6854              LDR      r4,[r2,#4]            ;263
0000f6  f0040401          AND      r4,r4,#1              ;263
0000fa  b11c              CBZ      r4,|L14.260|
0000fc  f64f74ff          MOV      r4,#0xffff            ;263
000100  42a3              CMP      r3,r4                 ;263
000102  d1f6              BNE      |L14.242|
                  |L14.260|
;;;266       }
;;;267    
;;;268        /* ...and check acknowledged */
;;;269        if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
000104  6854              LDR      r4,[r2,#4]
000106  f0040401          AND      r4,r4,#1
00010a  b10c              CBZ      r4,|L14.272|
;;;270        {
;;;271          InitStatus = CAN_InitStatus_Failed;
00010c  2000              MOVS     r0,#0
00010e  e000              B        |L14.274|
                  |L14.272|
;;;272        }
;;;273        else
;;;274        {
;;;275          InitStatus = CAN_InitStatus_Success ;
000110  2001              MOVS     r0,#1
                  |L14.274|
;;;276        }
;;;277      }
;;;278    
;;;279      /* At this step, return the status of initialization */
;;;280      return InitStatus;
;;;281    }
000112  bd30              POP      {r4,r5,pc}
;;;282    
                          ENDP


                          AREA ||i.CAN_MessagePending||, CODE, READONLY, ALIGN=1

                  CAN_MessagePending PROC
;;;741      */
;;;742    uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  4602              MOV      r2,r0
;;;743    {
;;;744      uint8_t message_pending=0;
000002  2000              MOVS     r0,#0
;;;745      /* Check the parameters */
;;;746      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;747      assert_param(IS_CAN_FIFO(FIFONumber));
;;;748      if (FIFONumber == CAN_FIFO0)
000004  b919              CBNZ     r1,|L15.14|
;;;749      {
;;;750        message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
000006  68d3              LDR      r3,[r2,#0xc]
000008  f0030003          AND      r0,r3,#3
00000c  e006              B        |L15.28|
                  |L15.14|
;;;751      }
;;;752      else if (FIFONumber == CAN_FIFO1)
00000e  2901              CMP      r1,#1
000010  d103              BNE      |L15.26|
;;;753      {
;;;754        message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
000012  6913              LDR      r3,[r2,#0x10]
000014  f0030003          AND      r0,r3,#3
000018  e000              B        |L15.28|
                  |L15.26|
;;;755      }
;;;756      else
;;;757      {
;;;758        message_pending = 0;
00001a  2000              MOVS     r0,#0
                  |L15.28|
;;;759      }
;;;760      return message_pending;
;;;761    }
00001c  4770              BX       lr
;;;762    
                          ENDP


                          AREA ||i.CAN_OperatingModeRequest||, CODE, READONLY, ALIGN=1

                  CAN_OperatingModeRequest PROC
;;;772      */
;;;773    uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
000000  b510              PUSH     {r4,lr}
;;;774    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;775      uint8_t status = CAN_ModeStatus_Failed;
000006  2000              MOVS     r0,#0
;;;776      
;;;777      /* Timeout for INAK or also for SLAK bits*/
;;;778      uint32_t timeout = INAK_TIMEOUT; 
000008  f64f71ff          MOV      r1,#0xffff
;;;779    
;;;780      /* Check the parameters */
;;;781      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;782      assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
;;;783    
;;;784      if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
00000c  b9bb              CBNZ     r3,|L16.62|
;;;785      {
;;;786        /* Request initialisation */
;;;787        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
00000e  6814              LDR      r4,[r2,#0]
000010  f0240402          BIC      r4,r4,#2
000014  f0440401          ORR      r4,r4,#1
000018  6014              STR      r4,[r2,#0]
;;;788    
;;;789        /* Wait the acknowledge */
;;;790        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
00001a  e000              B        |L16.30|
                  |L16.28|
;;;791        {
;;;792          timeout--;
00001c  1e49              SUBS     r1,r1,#1
                  |L16.30|
00001e  6854              LDR      r4,[r2,#4]            ;790
000020  f0040403          AND      r4,r4,#3              ;790
000024  2c01              CMP      r4,#1                 ;790
000026  d001              BEQ      |L16.44|
000028  2900              CMP      r1,#0                 ;790
00002a  d1f7              BNE      |L16.28|
                  |L16.44|
;;;793        }
;;;794        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
00002c  6854              LDR      r4,[r2,#4]
00002e  f0040403          AND      r4,r4,#3
000032  2c01              CMP      r4,#1
000034  d001              BEQ      |L16.58|
;;;795        {
;;;796          status = CAN_ModeStatus_Failed;
000036  2000              MOVS     r0,#0
000038  e032              B        |L16.160|
                  |L16.58|
;;;797        }
;;;798        else
;;;799        {
;;;800          status = CAN_ModeStatus_Success;
00003a  2001              MOVS     r0,#1
00003c  e030              B        |L16.160|
                  |L16.62|
;;;801        }
;;;802      }
;;;803      else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
00003e  2b01              CMP      r3,#1
000040  d113              BNE      |L16.106|
;;;804      {
;;;805        /* Request leave initialisation and sleep mode  and enter Normal mode */
;;;806        CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
000042  6814              LDR      r4,[r2,#0]
000044  f0240403          BIC      r4,r4,#3
000048  6014              STR      r4,[r2,#0]
;;;807    
;;;808        /* Wait the acknowledge */
;;;809        while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
00004a  e000              B        |L16.78|
                  |L16.76|
;;;810        {
;;;811          timeout--;
00004c  1e49              SUBS     r1,r1,#1
                  |L16.78|
00004e  6854              LDR      r4,[r2,#4]            ;809
000050  f0040403          AND      r4,r4,#3              ;809
000054  b10c              CBZ      r4,|L16.90|
000056  2900              CMP      r1,#0                 ;809
000058  d1f8              BNE      |L16.76|
                  |L16.90|
;;;812        }
;;;813        if ((CANx->MSR & CAN_MODE_MASK) != 0)
00005a  6854              LDR      r4,[r2,#4]
00005c  f0040403          AND      r4,r4,#3
000060  b10c              CBZ      r4,|L16.102|
;;;814        {
;;;815          status = CAN_ModeStatus_Failed;
000062  2000              MOVS     r0,#0
000064  e01c              B        |L16.160|
                  |L16.102|
;;;816        }
;;;817        else
;;;818        {
;;;819          status = CAN_ModeStatus_Success;
000066  2001              MOVS     r0,#1
000068  e01a              B        |L16.160|
                  |L16.106|
;;;820        }
;;;821      }
;;;822      else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
00006a  2b02              CMP      r3,#2
00006c  d117              BNE      |L16.158|
;;;823      {
;;;824        /* Request Sleep mode */
;;;825        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
00006e  6814              LDR      r4,[r2,#0]
000070  f0240401          BIC      r4,r4,#1
000074  f0440402          ORR      r4,r4,#2
000078  6014              STR      r4,[r2,#0]
;;;826    
;;;827        /* Wait the acknowledge */
;;;828        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
00007a  e000              B        |L16.126|
                  |L16.124|
;;;829        {
;;;830          timeout--;
00007c  1e49              SUBS     r1,r1,#1
                  |L16.126|
00007e  6854              LDR      r4,[r2,#4]            ;828
000080  f0040403          AND      r4,r4,#3              ;828
000084  2c02              CMP      r4,#2                 ;828
000086  d001              BEQ      |L16.140|
000088  2900              CMP      r1,#0                 ;828
00008a  d1f7              BNE      |L16.124|
                  |L16.140|
;;;831        }
;;;832        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
00008c  6854              LDR      r4,[r2,#4]
00008e  f0040403          AND      r4,r4,#3
000092  2c02              CMP      r4,#2
000094  d001              BEQ      |L16.154|
;;;833        {
;;;834          status = CAN_ModeStatus_Failed;
000096  2000              MOVS     r0,#0
000098  e002              B        |L16.160|
                  |L16.154|
;;;835        }
;;;836        else
;;;837        {
;;;838          status = CAN_ModeStatus_Success;
00009a  2001              MOVS     r0,#1
00009c  e000              B        |L16.160|
                  |L16.158|
;;;839        }
;;;840      }
;;;841      else
;;;842      {
;;;843        status = CAN_ModeStatus_Failed;
00009e  2000              MOVS     r0,#0
                  |L16.160|
;;;844      }
;;;845    
;;;846      return  (uint8_t) status;
;;;847    }
0000a0  bd10              POP      {r4,pc}
;;;848    
                          ENDP


                          AREA ||i.CAN_Receive||, CODE, READONLY, ALIGN=1

                  CAN_Receive PROC
;;;669      */
;;;670    void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
000000  b510              PUSH     {r4,lr}
;;;671    {
;;;672      /* Check the parameters */
;;;673      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;674      assert_param(IS_CAN_FIFO(FIFONumber));
;;;675      /* Get the Id */
;;;676      RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
000002  f50073d8          ADD      r3,r0,#0x1b0
000006  eb031301          ADD      r3,r3,r1,LSL #4
00000a  681b              LDR      r3,[r3,#0]
00000c  f0030304          AND      r3,r3,#4
000010  7213              STRB     r3,[r2,#8]
;;;677      if (RxMessage->IDE == CAN_Id_Standard)
000012  7a13              LDRB     r3,[r2,#8]
000014  b953              CBNZ     r3,|L17.44|
;;;678      {
;;;679        RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
000016  f50073d8          ADD      r3,r0,#0x1b0
00001a  eb031301          ADD      r3,r3,r1,LSL #4
00001e  681b              LDR      r3,[r3,#0]
000020  f24074ff          MOV      r4,#0x7ff
000024  ea045353          AND      r3,r4,r3,LSR #21
000028  6013              STR      r3,[r2,#0]
00002a  e009              B        |L17.64|
                  |L17.44|
;;;680      }
;;;681      else
;;;682      {
;;;683        RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
00002c  f50073d8          ADD      r3,r0,#0x1b0
000030  eb031301          ADD      r3,r3,r1,LSL #4
000034  681b              LDR      r3,[r3,#0]
000036  f06f4460          MVN      r4,#0xe0000000
00003a  ea0403d3          AND      r3,r4,r3,LSR #3
00003e  6053              STR      r3,[r2,#4]
                  |L17.64|
;;;684      }
;;;685      
;;;686      RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
000040  f50073d8          ADD      r3,r0,#0x1b0
000044  eb031301          ADD      r3,r3,r1,LSL #4
000048  681b              LDR      r3,[r3,#0]
00004a  f0030302          AND      r3,r3,#2
00004e  7253              STRB     r3,[r2,#9]
;;;687      /* Get the DLC */
;;;688      RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
000050  f50073d8          ADD      r3,r0,#0x1b0
000054  eb031301          ADD      r3,r3,r1,LSL #4
000058  685b              LDR      r3,[r3,#4]
00005a  f003030f          AND      r3,r3,#0xf
00005e  7293              STRB     r3,[r2,#0xa]
;;;689      /* Get the FMI */
;;;690      RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
000060  f50073d8          ADD      r3,r0,#0x1b0
000064  eb031301          ADD      r3,r3,r1,LSL #4
000068  685b              LDR      r3,[r3,#4]
00006a  0a1b              LSRS     r3,r3,#8
00006c  74d3              STRB     r3,[r2,#0x13]
;;;691      /* Get the data field */
;;;692      RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
00006e  f50073d8          ADD      r3,r0,#0x1b0
000072  eb031301          ADD      r3,r3,r1,LSL #4
000076  689b              LDR      r3,[r3,#8]
000078  72d3              STRB     r3,[r2,#0xb]
;;;693      RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
00007a  f50073d8          ADD      r3,r0,#0x1b0
00007e  eb031301          ADD      r3,r3,r1,LSL #4
000082  689b              LDR      r3,[r3,#8]
000084  0a1c              LSRS     r4,r3,#8
000086  7314              STRB     r4,[r2,#0xc]
;;;694      RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
000088  f50073d8          ADD      r3,r0,#0x1b0
00008c  eb031301          ADD      r3,r3,r1,LSL #4
000090  689b              LDR      r3,[r3,#8]
000092  0c1c              LSRS     r4,r3,#16
000094  7354              STRB     r4,[r2,#0xd]
;;;695      RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
000096  f50073d8          ADD      r3,r0,#0x1b0
00009a  eb031301          ADD      r3,r3,r1,LSL #4
00009e  689b              LDR      r3,[r3,#8]
0000a0  0e1b              LSRS     r3,r3,#24
0000a2  7393              STRB     r3,[r2,#0xe]
;;;696      RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
0000a4  f50073d8          ADD      r3,r0,#0x1b0
0000a8  eb031301          ADD      r3,r3,r1,LSL #4
0000ac  68db              LDR      r3,[r3,#0xc]
0000ae  73d3              STRB     r3,[r2,#0xf]
;;;697      RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
0000b0  f50073d8          ADD      r3,r0,#0x1b0
0000b4  eb031301          ADD      r3,r3,r1,LSL #4
0000b8  68db              LDR      r3,[r3,#0xc]
0000ba  0a1c              LSRS     r4,r3,#8
0000bc  7414              STRB     r4,[r2,#0x10]
;;;698      RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
0000be  f50073d8          ADD      r3,r0,#0x1b0
0000c2  eb031301          ADD      r3,r3,r1,LSL #4
0000c6  68db              LDR      r3,[r3,#0xc]
0000c8  0c1c              LSRS     r4,r3,#16
0000ca  7454              STRB     r4,[r2,#0x11]
;;;699      RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
0000cc  f50073d8          ADD      r3,r0,#0x1b0
0000d0  eb031301          ADD      r3,r3,r1,LSL #4
0000d4  68db              LDR      r3,[r3,#0xc]
0000d6  0e1b              LSRS     r3,r3,#24
0000d8  7493              STRB     r3,[r2,#0x12]
;;;700      /* Release the FIFO */
;;;701      /* Release FIFO0 */
;;;702      if (FIFONumber == CAN_FIFO0)
0000da  b921              CBNZ     r1,|L17.230|
;;;703      {
;;;704        CANx->RF0R |= CAN_RF0R_RFOM0;
0000dc  68c3              LDR      r3,[r0,#0xc]
0000de  f0430320          ORR      r3,r3,#0x20
0000e2  60c3              STR      r3,[r0,#0xc]
0000e4  e003              B        |L17.238|
                  |L17.230|
;;;705      }
;;;706      /* Release FIFO1 */
;;;707      else /* FIFONumber == CAN_FIFO1 */
;;;708      {
;;;709        CANx->RF1R |= CAN_RF1R_RFOM1;
0000e6  6903              LDR      r3,[r0,#0x10]
0000e8  f0430320          ORR      r3,r3,#0x20
0000ec  6103              STR      r3,[r0,#0x10]
                  |L17.238|
;;;710      }
;;;711    }
0000ee  bd10              POP      {r4,pc}
;;;712    
                          ENDP


                          AREA ||i.CAN_SlaveStartBank||, CODE, READONLY, ALIGN=2

                  CAN_SlaveStartBank PROC
;;;426      */
;;;427    void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
000000  490b              LDR      r1,|L18.48|
;;;428    {
;;;429      /* Check the parameters */
;;;430      assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
;;;431      
;;;432      /* Enter Initialisation mode for the filter */
;;;433      CAN1->FMR |= FMR_FINIT;
000002  6809              LDR      r1,[r1,#0]
000004  f0410101          ORR      r1,r1,#1
000008  4a09              LDR      r2,|L18.48|
00000a  6011              STR      r1,[r2,#0]
;;;434      
;;;435      /* Select the start slave bank */
;;;436      CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  f643720e          MOV      r2,#0x3f0e
000014  4391              BICS     r1,r1,r2
000016  4a06              LDR      r2,|L18.48|
000018  6011              STR      r1,[r2,#0]
;;;437      CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
00001a  4611              MOV      r1,r2
00001c  6809              LDR      r1,[r1,#0]
00001e  ea412100          ORR      r1,r1,r0,LSL #8
000022  6011              STR      r1,[r2,#0]
;;;438      
;;;439      /* Leave Initialisation mode for the filter */
;;;440      CAN1->FMR &= ~FMR_FINIT;
000024  4611              MOV      r1,r2
000026  6809              LDR      r1,[r1,#0]
000028  f0210101          BIC      r1,r1,#1
00002c  6011              STR      r1,[r2,#0]
;;;441    }
00002e  4770              BX       lr
;;;442    
                          ENDP

                  |L18.48|
                          DCD      0x40006600

                          AREA ||i.CAN_Sleep||, CODE, READONLY, ALIGN=1

                  CAN_Sleep PROC
;;;854      */
;;;855    uint8_t CAN_Sleep(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;856    {
;;;857      uint8_t sleepstatus = CAN_Sleep_Failed;
000002  2000              MOVS     r0,#0
;;;858      
;;;859      /* Check the parameters */
;;;860      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;861        
;;;862      /* Request Sleep mode */
;;;863       CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
000004  680a              LDR      r2,[r1,#0]
000006  f0220201          BIC      r2,r2,#1
00000a  f0420202          ORR      r2,r2,#2
00000e  600a              STR      r2,[r1,#0]
;;;864       
;;;865      /* Sleep mode status */
;;;866      if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
000010  684a              LDR      r2,[r1,#4]
000012  f0020203          AND      r2,r2,#3
000016  2a02              CMP      r2,#2
000018  d100              BNE      |L19.28|
;;;867      {
;;;868        /* Sleep mode not entered */
;;;869        sleepstatus =  CAN_Sleep_Ok;
00001a  2001              MOVS     r0,#1
                  |L19.28|
;;;870      }
;;;871      /* return sleep mode status */
;;;872       return (uint8_t)sleepstatus;
;;;873    }
00001c  4770              BX       lr
;;;874    
                          ENDP


                          AREA ||i.CAN_StructInit||, CODE, READONLY, ALIGN=1

                  CAN_StructInit PROC
;;;382      */
;;;383    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000000  2100              MOVS     r1,#0
;;;384    {
;;;385      /* Reset CAN init structure parameters values */
;;;386      
;;;387      /* Initialize the time triggered communication mode */
;;;388      CAN_InitStruct->CAN_TTCM = DISABLE;
000002  7181              STRB     r1,[r0,#6]
;;;389      
;;;390      /* Initialize the automatic bus-off management */
;;;391      CAN_InitStruct->CAN_ABOM = DISABLE;
000004  71c1              STRB     r1,[r0,#7]
;;;392      
;;;393      /* Initialize the automatic wake-up mode */
;;;394      CAN_InitStruct->CAN_AWUM = DISABLE;
000006  7201              STRB     r1,[r0,#8]
;;;395      
;;;396      /* Initialize the no automatic retransmission */
;;;397      CAN_InitStruct->CAN_NART = DISABLE;
000008  7241              STRB     r1,[r0,#9]
;;;398      
;;;399      /* Initialize the receive FIFO locked mode */
;;;400      CAN_InitStruct->CAN_RFLM = DISABLE;
00000a  7281              STRB     r1,[r0,#0xa]
;;;401      
;;;402      /* Initialize the transmit FIFO priority */
;;;403      CAN_InitStruct->CAN_TXFP = DISABLE;
00000c  72c1              STRB     r1,[r0,#0xb]
;;;404      
;;;405      /* Initialize the CAN_Mode member */
;;;406      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
00000e  7081              STRB     r1,[r0,#2]
;;;407      
;;;408      /* Initialize the CAN_SJW member */
;;;409      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000010  70c1              STRB     r1,[r0,#3]
;;;410      
;;;411      /* Initialize the CAN_BS1 member */
;;;412      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
000012  2103              MOVS     r1,#3
000014  7101              STRB     r1,[r0,#4]
;;;413      
;;;414      /* Initialize the CAN_BS2 member */
;;;415      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
000016  2102              MOVS     r1,#2
000018  7141              STRB     r1,[r0,#5]
;;;416      
;;;417      /* Initialize the CAN_Prescaler member */
;;;418      CAN_InitStruct->CAN_Prescaler = 1;
00001a  2101              MOVS     r1,#1
00001c  8001              STRH     r1,[r0,#0]
;;;419    }
00001e  4770              BX       lr
;;;420    
                          ENDP


                          AREA ||i.CAN_TTComModeCmd||, CODE, READONLY, ALIGN=1

                  CAN_TTComModeCmd PROC
;;;479      */
;;;480    void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
000000  b1e1              CBZ      r1,|L21.60|
;;;481    {
;;;482      /* Check the parameters */
;;;483      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;484      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;485      if (NewState != DISABLE)
;;;486      {
;;;487        /* Enable the TTCM mode */
;;;488        CANx->MCR |= CAN_MCR_TTCM;
000002  6802              LDR      r2,[r0,#0]
000004  f0420280          ORR      r2,r2,#0x80
000008  6002              STR      r2,[r0,#0]
;;;489    
;;;490        /* Set TGT bits */
;;;491        CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
00000a  f44f72c2          MOV      r2,#0x184
00000e  5812              LDR      r2,[r2,r0]
000010  f4427380          ORR      r3,r2,#0x100
000014  f44f72c2          MOV      r2,#0x184
000018  5013              STR      r3,[r2,r0]
;;;492        CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
00001a  f44f72ca          MOV      r2,#0x194
00001e  5812              LDR      r2,[r2,r0]
000020  f4427380          ORR      r3,r2,#0x100
000024  f44f72ca          MOV      r2,#0x194
000028  5013              STR      r3,[r2,r0]
;;;493        CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
00002a  f44f72d2          MOV      r2,#0x1a4
00002e  5812              LDR      r2,[r2,r0]
000030  f4427380          ORR      r3,r2,#0x100
000034  f44f72d2          MOV      r2,#0x1a4
000038  5013              STR      r3,[r2,r0]
00003a  e01b              B        |L21.116|
                  |L21.60|
;;;494      }
;;;495      else
;;;496      {
;;;497        /* Disable the TTCM mode */
;;;498        CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
00003c  6802              LDR      r2,[r0,#0]
00003e  f0220280          BIC      r2,r2,#0x80
000042  6002              STR      r2,[r0,#0]
;;;499    
;;;500        /* Reset TGT bits */
;;;501        CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
000044  f44f72c2          MOV      r2,#0x184
000048  5812              LDR      r2,[r2,r0]
00004a  f4227380          BIC      r3,r2,#0x100
00004e  f44f72c2          MOV      r2,#0x184
000052  5013              STR      r3,[r2,r0]
;;;502        CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
000054  f44f72ca          MOV      r2,#0x194
000058  5812              LDR      r2,[r2,r0]
00005a  f4227380          BIC      r3,r2,#0x100
00005e  f44f72ca          MOV      r2,#0x194
000062  5013              STR      r3,[r2,r0]
;;;503        CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
000064  f44f72d2          MOV      r2,#0x1a4
000068  5812              LDR      r2,[r2,r0]
00006a  f4227380          BIC      r3,r2,#0x100
00006e  f44f72d2          MOV      r2,#0x1a4
000072  5013              STR      r3,[r2,r0]
                  |L21.116|
;;;504      }
;;;505    }
000074  4770              BX       lr
;;;506    /**
                          ENDP


                          AREA ||i.CAN_Transmit||, CODE, READONLY, ALIGN=1

                  CAN_Transmit PROC
;;;513      */
;;;514    uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
000000  b510              PUSH     {r4,lr}
;;;515    {
000002  4602              MOV      r2,r0
;;;516      uint8_t transmit_mailbox = 0;
000004  2000              MOVS     r0,#0
;;;517      /* Check the parameters */
;;;518      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;519      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;520      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;521      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;522    
;;;523      /* Select one empty transmit mailbox */
;;;524      if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
000006  6893              LDR      r3,[r2,#8]
000008  f0036380          AND      r3,r3,#0x4000000
00000c  f1b36f80          CMP      r3,#0x4000000
000010  d100              BNE      |L22.20|
;;;525      {
;;;526        transmit_mailbox = 0;
000012  e010              B        |L22.54|
                  |L22.20|
;;;527      }
;;;528      else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
000014  6893              LDR      r3,[r2,#8]
000016  f0036300          AND      r3,r3,#0x8000000
00001a  f1b36f00          CMP      r3,#0x8000000
00001e  d101              BNE      |L22.36|
;;;529      {
;;;530        transmit_mailbox = 1;
000020  2001              MOVS     r0,#1
000022  e008              B        |L22.54|
                  |L22.36|
;;;531      }
;;;532      else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
000024  6893              LDR      r3,[r2,#8]
000026  f0035380          AND      r3,r3,#0x10000000
00002a  f1b35f80          CMP      r3,#0x10000000
00002e  d101              BNE      |L22.52|
;;;533      {
;;;534        transmit_mailbox = 2;
000030  2002              MOVS     r0,#2
000032  e000              B        |L22.54|
                  |L22.52|
;;;535      }
;;;536      else
;;;537      {
;;;538        transmit_mailbox = CAN_TxStatus_NoMailBox;
000034  2004              MOVS     r0,#4
                  |L22.54|
;;;539      }
;;;540    
;;;541      if (transmit_mailbox != CAN_TxStatus_NoMailBox)
000036  2804              CMP      r0,#4
000038  d074              BEQ      |L22.292|
;;;542      {
;;;543        /* Set up the Id */
;;;544        CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
00003a  f50273c0          ADD      r3,r2,#0x180
00003e  eb031300          ADD      r3,r3,r0,LSL #4
000042  681b              LDR      r3,[r3,#0]
000044  f0030401          AND      r4,r3,#1
000048  f50273c0          ADD      r3,r2,#0x180
00004c  eb031300          ADD      r3,r3,r0,LSL #4
000050  601c              STR      r4,[r3,#0]
;;;545        if (TxMessage->IDE == CAN_Id_Standard)
000052  7a0b              LDRB     r3,[r1,#8]
000054  b97b              CBNZ     r3,|L22.118|
;;;546        {
;;;547          assert_param(IS_CAN_STDID(TxMessage->StdId));  
;;;548          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
000056  7a4b              LDRB     r3,[r1,#9]
000058  880c              LDRH     r4,[r1,#0]
00005a  ea435344          ORR      r3,r3,r4,LSL #21
00005e  f50274c0          ADD      r4,r2,#0x180
000062  eb041400          ADD      r4,r4,r0,LSL #4
000066  6824              LDR      r4,[r4,#0]
000068  4323              ORRS     r3,r3,r4
00006a  f50274c0          ADD      r4,r2,#0x180
00006e  eb041400          ADD      r4,r4,r0,LSL #4
000072  6023              STR      r3,[r4,#0]
000074  e010              B        |L22.152|
                  |L22.118|
;;;549                                                      TxMessage->RTR);
;;;550        }
;;;551        else
;;;552        {
;;;553          assert_param(IS_CAN_EXTID(TxMessage->ExtId));
;;;554          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
000076  7a0b              LDRB     r3,[r1,#8]
000078  684c              LDR      r4,[r1,#4]
00007a  ea4303c4          ORR      r3,r3,r4,LSL #3
00007e  7a4c              LDRB     r4,[r1,#9]
000080  4323              ORRS     r3,r3,r4
000082  f50274c0          ADD      r4,r2,#0x180
000086  eb041400          ADD      r4,r4,r0,LSL #4
00008a  6824              LDR      r4,[r4,#0]
00008c  4323              ORRS     r3,r3,r4
00008e  f50274c0          ADD      r4,r2,#0x180
000092  eb041400          ADD      r4,r4,r0,LSL #4
000096  6023              STR      r3,[r4,#0]
                  |L22.152|
;;;555                                                      TxMessage->IDE | \
;;;556                                                      TxMessage->RTR);
;;;557        }
;;;558        
;;;559        /* Set up the DLC */
;;;560        TxMessage->DLC &= (uint8_t)0x0000000F;
000098  7a8b              LDRB     r3,[r1,#0xa]
00009a  f003030f          AND      r3,r3,#0xf
00009e  728b              STRB     r3,[r1,#0xa]
;;;561        CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
0000a0  f50273c0          ADD      r3,r2,#0x180
0000a4  eb031300          ADD      r3,r3,r0,LSL #4
0000a8  685b              LDR      r3,[r3,#4]
0000aa  f023040f          BIC      r4,r3,#0xf
0000ae  f50273c0          ADD      r3,r2,#0x180
0000b2  eb031300          ADD      r3,r3,r0,LSL #4
0000b6  605c              STR      r4,[r3,#4]
;;;562        CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
0000b8  f50273c0          ADD      r3,r2,#0x180
0000bc  eb031300          ADD      r3,r3,r0,LSL #4
0000c0  685b              LDR      r3,[r3,#4]
0000c2  7a8c              LDRB     r4,[r1,#0xa]
0000c4  4323              ORRS     r3,r3,r4
0000c6  f50274c0          ADD      r4,r2,#0x180
0000ca  eb041400          ADD      r4,r4,r0,LSL #4
0000ce  6063              STR      r3,[r4,#4]
;;;563    
;;;564        /* Set up the data field */
;;;565        CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
0000d0  7b8b              LDRB     r3,[r1,#0xe]
0000d2  061c              LSLS     r4,r3,#24
0000d4  7b4b              LDRB     r3,[r1,#0xd]
0000d6  ea444403          ORR      r4,r4,r3,LSL #16
0000da  7b0b              LDRB     r3,[r1,#0xc]
0000dc  ea442303          ORR      r3,r4,r3,LSL #8
0000e0  7acc              LDRB     r4,[r1,#0xb]
0000e2  4323              ORRS     r3,r3,r4
0000e4  f50274c0          ADD      r4,r2,#0x180
0000e8  eb041400          ADD      r4,r4,r0,LSL #4
0000ec  60a3              STR      r3,[r4,#8]
;;;566                                                 ((uint32_t)TxMessage->Data[2] << 16) |
;;;567                                                 ((uint32_t)TxMessage->Data[1] << 8) | 
;;;568                                                 ((uint32_t)TxMessage->Data[0]));
;;;569        CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
0000ee  7c8b              LDRB     r3,[r1,#0x12]
0000f0  061c              LSLS     r4,r3,#24
0000f2  7c4b              LDRB     r3,[r1,#0x11]
0000f4  ea444403          ORR      r4,r4,r3,LSL #16
0000f8  7c0b              LDRB     r3,[r1,#0x10]
0000fa  ea442303          ORR      r3,r4,r3,LSL #8
0000fe  7bcc              LDRB     r4,[r1,#0xf]
000100  4323              ORRS     r3,r3,r4
000102  f50274c0          ADD      r4,r2,#0x180
000106  eb041400          ADD      r4,r4,r0,LSL #4
00010a  60e3              STR      r3,[r4,#0xc]
;;;570                                                 ((uint32_t)TxMessage->Data[6] << 16) |
;;;571                                                 ((uint32_t)TxMessage->Data[5] << 8) |
;;;572                                                 ((uint32_t)TxMessage->Data[4]));
;;;573        /* Request transmission */
;;;574        CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
00010c  f50273c0          ADD      r3,r2,#0x180
000110  eb031300          ADD      r3,r3,r0,LSL #4
000114  681b              LDR      r3,[r3,#0]
000116  f0430401          ORR      r4,r3,#1
00011a  f50273c0          ADD      r3,r2,#0x180
00011e  eb031300          ADD      r3,r3,r0,LSL #4
000122  601c              STR      r4,[r3,#0]
                  |L22.292|
;;;575      }
;;;576      return transmit_mailbox;
;;;577    }
000124  bd10              POP      {r4,pc}
;;;578    
                          ENDP


                          AREA ||i.CAN_TransmitStatus||, CODE, READONLY, ALIGN=2

                  CAN_TransmitStatus PROC
;;;587      */
;;;588    uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
000000  b510              PUSH     {r4,lr}
;;;589    {
000002  4602              MOV      r2,r0
;;;590      uint32_t state = 0;
000004  2300              MOVS     r3,#0
;;;591    
;;;592      /* Check the parameters */
;;;593      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;594      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;595     
;;;596      switch (TransmitMailbox)
000006  b121              CBZ      r1,|L23.18|
000008  2901              CMP      r1,#1
00000a  d007              BEQ      |L23.28|
00000c  2902              CMP      r1,#2
00000e  d10f              BNE      |L23.48|
000010  e009              B        |L23.38|
                  |L23.18|
;;;597      {
;;;598        case (CAN_TXMAILBOX_0): 
;;;599          state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
000012  6890              LDR      r0,[r2,#8]
000014  4c1d              LDR      r4,|L23.140|
000016  ea000304          AND      r3,r0,r4
;;;600          break;
00001a  e00b              B        |L23.52|
                  |L23.28|
;;;601        case (CAN_TXMAILBOX_1): 
;;;602          state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
00001c  6890              LDR      r0,[r2,#8]
00001e  4c1c              LDR      r4,|L23.144|
000020  ea000304          AND      r3,r0,r4
;;;603          break;
000024  e006              B        |L23.52|
                  |L23.38|
;;;604        case (CAN_TXMAILBOX_2): 
;;;605          state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
000026  6890              LDR      r0,[r2,#8]
000028  4c1a              LDR      r4,|L23.148|
00002a  ea000304          AND      r3,r0,r4
;;;606          break;
00002e  e001              B        |L23.52|
                  |L23.48|
;;;607        default:
;;;608          state = CAN_TxStatus_Failed;
000030  2300              MOVS     r3,#0
;;;609          break;
000032  bf00              NOP      
                  |L23.52|
000034  bf00              NOP                            ;600
;;;610      }
;;;611      switch (state)
000036  4c18              LDR      r4,|L23.152|
000038  1b18              SUBS     r0,r3,r4
00003a  42a3              CMP      r3,r4
00003c  d016              BEQ      |L23.108|
00003e  dc07              BGT      |L23.80|
000040  b183              CBZ      r3,|L23.100|
000042  f06f6080          MVN      r0,#0x4000000
000046  4418              ADD      r0,r0,r3
000048  b170              CBZ      r0,|L23.104|
00004a  2802              CMP      r0,#2
00004c  d118              BNE      |L23.128|
00004e  e011              B        |L23.116|
                  |L23.80|
000050  f5b07f00          CMP      r0,#0x200
000054  d010              BEQ      |L23.120|
000056  4c11              LDR      r4,|L23.156|
000058  4420              ADD      r0,r0,r4
00005a  b148              CBZ      r0,|L23.112|
00005c  f5b03f00          CMP      r0,#0x20000
000060  d10e              BNE      |L23.128|
000062  e00b              B        |L23.124|
                  |L23.100|
;;;612      {
;;;613          /* transmit pending  */
;;;614        case (0x0): state = CAN_TxStatus_Pending;
000064  2302              MOVS     r3,#2
;;;615          break;
000066  e00d              B        |L23.132|
                  |L23.104|
;;;616          /* transmit failed  */
;;;617         case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
000068  2300              MOVS     r3,#0
;;;618          break;
00006a  e00b              B        |L23.132|
                  |L23.108|
;;;619         case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
00006c  2300              MOVS     r3,#0
;;;620          break;
00006e  e009              B        |L23.132|
                  |L23.112|
;;;621         case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
000070  2300              MOVS     r3,#0
;;;622          break;
000072  e007              B        |L23.132|
                  |L23.116|
;;;623          /* transmit succeeded  */
;;;624        case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
000074  2301              MOVS     r3,#1
;;;625          break;
000076  e005              B        |L23.132|
                  |L23.120|
;;;626        case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
000078  2301              MOVS     r3,#1
;;;627          break;
00007a  e003              B        |L23.132|
                  |L23.124|
;;;628        case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
00007c  2301              MOVS     r3,#1
;;;629          break;
00007e  e001              B        |L23.132|
                  |L23.128|
;;;630        default: state = CAN_TxStatus_Failed;
000080  2300              MOVS     r3,#0
;;;631          break;
000082  bf00              NOP      
                  |L23.132|
000084  bf00              NOP                            ;615
;;;632      }
;;;633      return (uint8_t) state;
000086  b2d8              UXTB     r0,r3
;;;634    }
000088  bd10              POP      {r4,pc}
;;;635    
                          ENDP

00008a  0000              DCW      0x0000
                  |L23.140|
                          DCD      0x04000003
                  |L23.144|
                          DCD      0x08000300
                  |L23.148|
                          DCD      0x10030000
                  |L23.152|
                          DCD      0x08000100
                  |L23.156|
                          DCD      0xf7ff0100

                          AREA ||i.CAN_WakeUp||, CODE, READONLY, ALIGN=1

                  CAN_WakeUp PROC
;;;880      */
;;;881    uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;882    {
;;;883      uint32_t wait_slak = SLAK_TIMEOUT;
000002  f64f72ff          MOV      r2,#0xffff
;;;884      uint8_t wakeupstatus = CAN_WakeUp_Failed;
000006  2000              MOVS     r0,#0
;;;885      
;;;886      /* Check the parameters */
;;;887      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;888        
;;;889      /* Wake up request */
;;;890      CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
000008  680b              LDR      r3,[r1,#0]
00000a  f0230302          BIC      r3,r3,#2
00000e  600b              STR      r3,[r1,#0]
;;;891        
;;;892      /* Sleep mode status */
;;;893      while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
000010  e000              B        |L24.20|
                  |L24.18|
;;;894      {
;;;895       wait_slak--;
000012  1e52              SUBS     r2,r2,#1
                  |L24.20|
000014  684b              LDR      r3,[r1,#4]            ;893
000016  f0030302          AND      r3,r3,#2              ;893
00001a  2b02              CMP      r3,#2                 ;893
00001c  d101              BNE      |L24.34|
00001e  2a00              CMP      r2,#0                 ;893
000020  d1f7              BNE      |L24.18|
                  |L24.34|
;;;896      }
;;;897      if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
000022  684b              LDR      r3,[r1,#4]
000024  f0030302          AND      r3,r3,#2
000028  2b02              CMP      r3,#2
00002a  d000              BEQ      |L24.46|
;;;898      {
;;;899       /* wake up done : Sleep mode exited */
;;;900        wakeupstatus = CAN_WakeUp_Ok;
00002c  2001              MOVS     r0,#1
                  |L24.46|
;;;901      }
;;;902      /* return wakeup status */
;;;903      return (uint8_t)wakeupstatus;
;;;904    }
00002e  4770              BX       lr
;;;905    
                          ENDP


                          AREA ||i.CheckITStatus||, CODE, READONLY, ALIGN=1

                  CheckITStatus PROC
;;;1383     */
;;;1384   static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
000000  4602              MOV      r2,r0
;;;1385   {
;;;1386     ITStatus pendingbitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1387     
;;;1388     if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
000004  ea020301          AND      r3,r2,r1
000008  b10b              CBZ      r3,|L25.14|
;;;1389     {
;;;1390       /* CAN_IT is set */
;;;1391       pendingbitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L25.16|
                  |L25.14|
;;;1392     }
;;;1393     else
;;;1394     {
;;;1395       /* CAN_IT is reset */
;;;1396       pendingbitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L25.16|
;;;1397     }
;;;1398     return pendingbitstatus;
;;;1399   }
000010  4770              BX       lr
;;;1400   
                          ENDP

