; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\output\stm32f10x_pwr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\output\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Drivers\CMSIS -I..\Drivers\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\Drivers\BSP\SYS -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\USART -I..\Middlewares\FreeRTOS\include -I..\Middlewares\FreeRTOS\portable\RVDS\ARM_CM3 -I..\Drivers\BSP\LED -I..\Drivers\BSP\OLED -I..\Drivers\BSP\TIM -I..\Drivers\BSP\PWM -I..\Drivers\BSP\SYSTICK -I..\Drivers\BSP\SYS -ID:\AppData\keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=540 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\output\stm32f10x_pwr.crf ..\Drivers\STM32F10x_StdPeriph_Driver\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;122      */
;;;123    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;124    {
;;;125      /* Check the parameters */
;;;126      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;127      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;128    }
000004  4770              BX       lr
;;;129    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;284      */
;;;285    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4903              LDR      r1,|L2.16|
;;;286    {
;;;287      /* Check the parameters */
;;;288      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;289             
;;;290      PWR->CR |=  PWR_FLAG << 2;
000002  6809              LDR      r1,[r1,#0]
000004  ea410180          ORR      r1,r1,r0,LSL #2
000008  4a01              LDR      r2,|L2.16|
00000a  6011              STR      r1,[r2,#0]
;;;291    }
00000c  4770              BX       lr
;;;292    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;110      */
;;;111    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;114      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;115    }
000014  bd10              POP      {r4,pc}
;;;116    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;235      */
;;;236    void PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L4.32|
;;;237    {
;;;238      /* Select STANDBY mode */
;;;239      PWR->CR |= PWR_CR_PDDS;
000002  6800              LDR      r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4905              LDR      r1,|L4.32|
00000a  6008              STR      r0,[r1,#0]
;;;240      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;241      SCB->SCR |= SCB_SCR_SLEEPDEEP;
00000c  4805              LDR      r0,|L4.36|
00000e  6800              LDR      r0,[r0,#0]
000010  f0400004          ORR      r0,r0,#4
000014  4903              LDR      r1,|L4.36|
000016  6008              STR      r0,[r1,#0]
;;;242    /* This option is used to ensure that store operations are completed */
;;;243    #if defined ( __CC_ARM   )
;;;244      __force_stores();
000018  bf00              NOP      
00001a  bf00              NOP      
;;;245    #endif
;;;246      /* Request Wait For Interrupt */
;;;247      __WFI();
00001c  bf30              WFI      
;;;248    }
00001e  4770              BX       lr
;;;249    
                          ENDP

                  |L4.32|
                          DCD      0x40007000
                  |L4.36|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;195      */
;;;196    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;197    {
000002  4602              MOV      r2,r0
;;;198      uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;199      /* Check the parameters */
;;;200      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;201      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;202      
;;;203      /* Select the regulator state in STOP mode ---------------------------------*/
;;;204      tmpreg = PWR->CR;
000006  4b0c              LDR      r3,|L5.56|
000008  6818              LDR      r0,[r3,#0]
;;;205      /* Clear PDDS and LPDS bits */
;;;206      tmpreg &= CR_DS_MASK;
00000a  f0200003          BIC      r0,r0,#3
;;;207      /* Set LPDS bit according to PWR_Regulator value */
;;;208      tmpreg |= PWR_Regulator;
00000e  4310              ORRS     r0,r0,r2
;;;209      /* Store the new value */
;;;210      PWR->CR = tmpreg;
000010  6018              STR      r0,[r3,#0]
;;;211      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;212      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000012  4b0a              LDR      r3,|L5.60|
000014  681b              LDR      r3,[r3,#0]
000016  f0430304          ORR      r3,r3,#4
00001a  4c08              LDR      r4,|L5.60|
00001c  6023              STR      r3,[r4,#0]
;;;213      
;;;214      /* Select STOP mode entry --------------------------------------------------*/
;;;215      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
00001e  2901              CMP      r1,#1
000020  d101              BNE      |L5.38|
;;;216      {   
;;;217        /* Request Wait For Interrupt */
;;;218        __WFI();
000022  bf30              WFI      
000024  e000              B        |L5.40|
                  |L5.38|
;;;219      }
;;;220      else
;;;221      {
;;;222        /* Request Wait For Event */
;;;223        __WFE();
000026  bf20              WFE      
                  |L5.40|
;;;224      }
;;;225      
;;;226      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;227      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
000028  4b04              LDR      r3,|L5.60|
00002a  681b              LDR      r3,[r3,#0]
00002c  f0230304          BIC      r3,r3,#4
000030  4c02              LDR      r4,|L5.60|
000032  6023              STR      r3,[r4,#0]
;;;228    }
000034  bd10              POP      {r4,pc}
;;;229    
                          ENDP

000036  0000              DCW      0x0000
                  |L5.56|
                          DCD      0x40007000
                  |L5.60|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;258      */
;;;259    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4601              MOV      r1,r0
;;;260    {
;;;261      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;262      /* Check the parameters */
;;;263      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;264      
;;;265      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L6.20|
000006  6852              LDR      r2,[r2,#4]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L6.16|
;;;266      {
;;;267        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L6.18|
                  |L6.16|
;;;268      }
;;;269      else
;;;270      {
;;;271        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;272      }
;;;273      /* Return the flag status */
;;;274      return bitstatus;
;;;275    }
000012  4770              BX       lr
;;;276    
                          ENDP

                  |L6.20|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;135      */
;;;136    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;137    {
;;;138      /* Check the parameters */
;;;139      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;140      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;141    }
000004  4770              BX       lr
;;;142    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;156      */
;;;157    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4601              MOV      r1,r0
;;;158    {
;;;159      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;160      /* Check the parameters */
;;;161      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;162      tmpreg = PWR->CR;
000004  4a03              LDR      r2,|L8.20|
000006  6810              LDR      r0,[r2,#0]
;;;163      /* Clear PLS[7:5] bits */
;;;164      tmpreg &= CR_PLS_MASK;
000008  f02000e0          BIC      r0,r0,#0xe0
;;;165      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;166      tmpreg |= PWR_PVDLevel;
00000c  4308              ORRS     r0,r0,r1
;;;167      /* Store the new value */
;;;168      PWR->CR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;169    }
000010  4770              BX       lr
;;;170    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;176      */
;;;177    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L9.8|
;;;178    {
;;;179      /* Check the parameters */
;;;180      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;181      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;182    }
000004  4770              BX       lr
;;;183    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x420e00a0
